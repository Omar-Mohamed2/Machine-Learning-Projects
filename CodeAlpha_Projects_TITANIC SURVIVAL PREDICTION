{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "15399d27",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2024-05-27T23:53:33.818831Z",
     "iopub.status.busy": "2024-05-27T23:53:33.818456Z",
     "iopub.status.idle": "2024-05-27T23:53:34.706356Z",
     "shell.execute_reply": "2024-05-27T23:53:34.704837Z"
    },
    "papermill": {
     "duration": 0.902072,
     "end_time": "2024-05-27T23:53:34.708655",
     "exception": false,
     "start_time": "2024-05-27T23:53:33.806583",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/titanic-datasets/titanic.csv\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "        for filename in filenames:\n",
    "         print(os.path.join(dirname, filename))\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a6f5c65a",
   "metadata": {
    "papermill": {
     "duration": 0.009434,
     "end_time": "2024-05-27T23:53:34.727463",
     "exception": false,
     "start_time": "2024-05-27T23:53:34.718029",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Read Data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "ba399330",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-27T23:53:34.748798Z",
     "iopub.status.busy": "2024-05-27T23:53:34.747520Z",
     "iopub.status.idle": "2024-05-27T23:53:34.768438Z",
     "shell.execute_reply": "2024-05-27T23:53:34.767521Z"
    },
    "papermill": {
     "duration": 0.034163,
     "end_time": "2024-05-27T23:53:34.771027",
     "exception": false,
     "start_time": "2024-05-27T23:53:34.736864",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "Data=pd.read_csv(\"/kaggle/input/titanic-datasets/titanic.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "38e8e2ad",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-27T23:53:34.792399Z",
     "iopub.status.busy": "2024-05-27T23:53:34.791777Z",
     "iopub.status.idle": "2024-05-27T23:53:34.819454Z",
     "shell.execute_reply": "2024-05-27T23:53:34.818362Z"
    },
    "papermill": {
     "duration": 0.041447,
     "end_time": "2024-05-27T23:53:34.821699",
     "exception": false,
     "start_time": "2024-05-27T23:53:34.780252",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PassengerId</th>\n",
       "      <th>Survived</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Name</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Ticket</th>\n",
       "      <th>Fare</th>\n",
       "      <th>Cabin</th>\n",
       "      <th>Embarked</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>892</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Kelly, Mr. James</td>\n",
       "      <td>male</td>\n",
       "      <td>34.5</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>330911</td>\n",
       "      <td>7.8292</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Q</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>893</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>Wilkes, Mrs. James (Ellen Needs)</td>\n",
       "      <td>female</td>\n",
       "      <td>47.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>363272</td>\n",
       "      <td>7.0000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>894</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>Myles, Mr. Thomas Francis</td>\n",
       "      <td>male</td>\n",
       "      <td>62.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>240276</td>\n",
       "      <td>9.6875</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Q</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>895</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Wirz, Mr. Albert</td>\n",
       "      <td>male</td>\n",
       "      <td>27.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>315154</td>\n",
       "      <td>8.6625</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>896</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>Hirvonen, Mrs. Alexander (Helga E Lindqvist)</td>\n",
       "      <td>female</td>\n",
       "      <td>22.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>3101298</td>\n",
       "      <td>12.2875</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>897</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Svensson, Mr. Johan Cervin</td>\n",
       "      <td>male</td>\n",
       "      <td>14.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>7538</td>\n",
       "      <td>9.2250</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>898</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>Connolly, Miss. Kate</td>\n",
       "      <td>female</td>\n",
       "      <td>30.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>330972</td>\n",
       "      <td>7.6292</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Q</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>899</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>Caldwell, Mr. Albert Francis</td>\n",
       "      <td>male</td>\n",
       "      <td>26.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>248738</td>\n",
       "      <td>29.0000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>900</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>Abrahim, Mrs. Joseph (Sophie Halaut Easu)</td>\n",
       "      <td>female</td>\n",
       "      <td>18.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2657</td>\n",
       "      <td>7.2292</td>\n",
       "      <td>NaN</td>\n",
       "      <td>C</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>901</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Davies, Mr. John Samuel</td>\n",
       "      <td>male</td>\n",
       "      <td>21.0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>A/4 48871</td>\n",
       "      <td>24.1500</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   PassengerId  Survived  Pclass  \\\n",
       "0          892         0       3   \n",
       "1          893         1       3   \n",
       "2          894         0       2   \n",
       "3          895         0       3   \n",
       "4          896         1       3   \n",
       "5          897         0       3   \n",
       "6          898         1       3   \n",
       "7          899         0       2   \n",
       "8          900         1       3   \n",
       "9          901         0       3   \n",
       "\n",
       "                                           Name     Sex   Age  SibSp  Parch  \\\n",
       "0                              Kelly, Mr. James    male  34.5      0      0   \n",
       "1              Wilkes, Mrs. James (Ellen Needs)  female  47.0      1      0   \n",
       "2                     Myles, Mr. Thomas Francis    male  62.0      0      0   \n",
       "3                              Wirz, Mr. Albert    male  27.0      0      0   \n",
       "4  Hirvonen, Mrs. Alexander (Helga E Lindqvist)  female  22.0      1      1   \n",
       "5                    Svensson, Mr. Johan Cervin    male  14.0      0      0   \n",
       "6                          Connolly, Miss. Kate  female  30.0      0      0   \n",
       "7                  Caldwell, Mr. Albert Francis    male  26.0      1      1   \n",
       "8     Abrahim, Mrs. Joseph (Sophie Halaut Easu)  female  18.0      0      0   \n",
       "9                       Davies, Mr. John Samuel    male  21.0      2      0   \n",
       "\n",
       "      Ticket     Fare Cabin Embarked  \n",
       "0     330911   7.8292   NaN        Q  \n",
       "1     363272   7.0000   NaN        S  \n",
       "2     240276   9.6875   NaN        Q  \n",
       "3     315154   8.6625   NaN        S  \n",
       "4    3101298  12.2875   NaN        S  \n",
       "5       7538   9.2250   NaN        S  \n",
       "6     330972   7.6292   NaN        Q  \n",
       "7     248738  29.0000   NaN        S  \n",
       "8       2657   7.2292   NaN        C  \n",
       "9  A/4 48871  24.1500   NaN        S  "
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Data.head(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "e09d7f86",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-27T23:53:34.842260Z",
     "iopub.status.busy": "2024-05-27T23:53:34.841883Z",
     "iopub.status.idle": "2024-05-27T23:53:34.856753Z",
     "shell.execute_reply": "2024-05-27T23:53:34.855663Z"
    },
    "papermill": {
     "duration": 0.027849,
     "end_time": "2024-05-27T23:53:34.858959",
     "exception": false,
     "start_time": "2024-05-27T23:53:34.831110",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PassengerId</th>\n",
       "      <th>Survived</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Name</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Ticket</th>\n",
       "      <th>Fare</th>\n",
       "      <th>Cabin</th>\n",
       "      <th>Embarked</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>413</th>\n",
       "      <td>1305</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Spector, Mr. Woolf</td>\n",
       "      <td>male</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>A.5. 3236</td>\n",
       "      <td>8.0500</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>414</th>\n",
       "      <td>1306</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Oliva y Ocana, Dona. Fermina</td>\n",
       "      <td>female</td>\n",
       "      <td>39.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>PC 17758</td>\n",
       "      <td>108.9000</td>\n",
       "      <td>C105</td>\n",
       "      <td>C</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>415</th>\n",
       "      <td>1307</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Saether, Mr. Simon Sivertsen</td>\n",
       "      <td>male</td>\n",
       "      <td>38.5</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>SOTON/O.Q. 3101262</td>\n",
       "      <td>7.2500</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>416</th>\n",
       "      <td>1308</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Ware, Mr. Frederick</td>\n",
       "      <td>male</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>359309</td>\n",
       "      <td>8.0500</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>417</th>\n",
       "      <td>1309</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Peter, Master. Michael J</td>\n",
       "      <td>male</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2668</td>\n",
       "      <td>22.3583</td>\n",
       "      <td>NaN</td>\n",
       "      <td>C</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     PassengerId  Survived  Pclass                          Name     Sex  \\\n",
       "413         1305         0       3            Spector, Mr. Woolf    male   \n",
       "414         1306         1       1  Oliva y Ocana, Dona. Fermina  female   \n",
       "415         1307         0       3  Saether, Mr. Simon Sivertsen    male   \n",
       "416         1308         0       3           Ware, Mr. Frederick    male   \n",
       "417         1309         0       3      Peter, Master. Michael J    male   \n",
       "\n",
       "      Age  SibSp  Parch              Ticket      Fare Cabin Embarked  \n",
       "413   NaN      0      0           A.5. 3236    8.0500   NaN        S  \n",
       "414  39.0      0      0            PC 17758  108.9000  C105        C  \n",
       "415  38.5      0      0  SOTON/O.Q. 3101262    7.2500   NaN        S  \n",
       "416   NaN      0      0              359309    8.0500   NaN        S  \n",
       "417   NaN      1      1                2668   22.3583   NaN        C  "
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Data.tail(5)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d30107ce",
   "metadata": {
    "papermill": {
     "duration": 0.009381,
     "end_time": "2024-05-27T23:53:34.878106",
     "exception": false,
     "start_time": "2024-05-27T23:53:34.868725",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Showing statical info"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "ac184a9d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-27T23:53:34.899575Z",
     "iopub.status.busy": "2024-05-27T23:53:34.898941Z",
     "iopub.status.idle": "2024-05-27T23:53:34.909866Z",
     "shell.execute_reply": "2024-05-27T23:53:34.908666Z"
    },
    "papermill": {
     "duration": 0.024197,
     "end_time": "2024-05-27T23:53:34.911975",
     "exception": false,
     "start_time": "2024-05-27T23:53:34.887778",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "PassengerId      0\n",
       "Survived         0\n",
       "Pclass           0\n",
       "Name             0\n",
       "Sex              0\n",
       "Age             86\n",
       "SibSp            0\n",
       "Parch            0\n",
       "Ticket           0\n",
       "Fare             1\n",
       "Cabin          327\n",
       "Embarked         0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Data.isna().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "ad10af6e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-27T23:53:34.933355Z",
     "iopub.status.busy": "2024-05-27T23:53:34.932938Z",
     "iopub.status.idle": "2024-05-27T23:53:34.950010Z",
     "shell.execute_reply": "2024-05-27T23:53:34.948736Z"
    },
    "papermill": {
     "duration": 0.030719,
     "end_time": "2024-05-27T23:53:34.952561",
     "exception": false,
     "start_time": "2024-05-27T23:53:34.921842",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<bound method DataFrame.info of      PassengerId  Survived  Pclass  \\\n",
       "0            892         0       3   \n",
       "1            893         1       3   \n",
       "2            894         0       2   \n",
       "3            895         0       3   \n",
       "4            896         1       3   \n",
       "..           ...       ...     ...   \n",
       "413         1305         0       3   \n",
       "414         1306         1       1   \n",
       "415         1307         0       3   \n",
       "416         1308         0       3   \n",
       "417         1309         0       3   \n",
       "\n",
       "                                             Name     Sex   Age  SibSp  Parch  \\\n",
       "0                                Kelly, Mr. James    male  34.5      0      0   \n",
       "1                Wilkes, Mrs. James (Ellen Needs)  female  47.0      1      0   \n",
       "2                       Myles, Mr. Thomas Francis    male  62.0      0      0   \n",
       "3                                Wirz, Mr. Albert    male  27.0      0      0   \n",
       "4    Hirvonen, Mrs. Alexander (Helga E Lindqvist)  female  22.0      1      1   \n",
       "..                                            ...     ...   ...    ...    ...   \n",
       "413                            Spector, Mr. Woolf    male   NaN      0      0   \n",
       "414                  Oliva y Ocana, Dona. Fermina  female  39.0      0      0   \n",
       "415                  Saether, Mr. Simon Sivertsen    male  38.5      0      0   \n",
       "416                           Ware, Mr. Frederick    male   NaN      0      0   \n",
       "417                      Peter, Master. Michael J    male   NaN      1      1   \n",
       "\n",
       "                 Ticket      Fare Cabin Embarked  \n",
       "0                330911    7.8292   NaN        Q  \n",
       "1                363272    7.0000   NaN        S  \n",
       "2                240276    9.6875   NaN        Q  \n",
       "3                315154    8.6625   NaN        S  \n",
       "4               3101298   12.2875   NaN        S  \n",
       "..                  ...       ...   ...      ...  \n",
       "413           A.5. 3236    8.0500   NaN        S  \n",
       "414            PC 17758  108.9000  C105        C  \n",
       "415  SOTON/O.Q. 3101262    7.2500   NaN        S  \n",
       "416              359309    8.0500   NaN        S  \n",
       "417                2668   22.3583   NaN        C  \n",
       "\n",
       "[418 rows x 12 columns]>"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Data.info"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "f86e437d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-27T23:53:34.974625Z",
     "iopub.status.busy": "2024-05-27T23:53:34.974233Z",
     "iopub.status.idle": "2024-05-27T23:53:35.003835Z",
     "shell.execute_reply": "2024-05-27T23:53:35.002732Z"
    },
    "papermill": {
     "duration": 0.043561,
     "end_time": "2024-05-27T23:53:35.006340",
     "exception": false,
     "start_time": "2024-05-27T23:53:34.962779",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PassengerId</th>\n",
       "      <th>Survived</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Fare</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>418.000000</td>\n",
       "      <td>418.000000</td>\n",
       "      <td>418.000000</td>\n",
       "      <td>332.000000</td>\n",
       "      <td>418.000000</td>\n",
       "      <td>418.000000</td>\n",
       "      <td>417.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>1100.500000</td>\n",
       "      <td>0.363636</td>\n",
       "      <td>2.265550</td>\n",
       "      <td>30.272590</td>\n",
       "      <td>0.447368</td>\n",
       "      <td>0.392344</td>\n",
       "      <td>35.627188</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>120.810458</td>\n",
       "      <td>0.481622</td>\n",
       "      <td>0.841838</td>\n",
       "      <td>14.181209</td>\n",
       "      <td>0.896760</td>\n",
       "      <td>0.981429</td>\n",
       "      <td>55.907576</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>892.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.170000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>996.250000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>21.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>7.895800</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>1100.500000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>27.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>14.454200</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>1204.750000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>39.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>31.500000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>1309.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>76.000000</td>\n",
       "      <td>8.000000</td>\n",
       "      <td>9.000000</td>\n",
       "      <td>512.329200</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       PassengerId    Survived      Pclass         Age       SibSp  \\\n",
       "count   418.000000  418.000000  418.000000  332.000000  418.000000   \n",
       "mean   1100.500000    0.363636    2.265550   30.272590    0.447368   \n",
       "std     120.810458    0.481622    0.841838   14.181209    0.896760   \n",
       "min     892.000000    0.000000    1.000000    0.170000    0.000000   \n",
       "25%     996.250000    0.000000    1.000000   21.000000    0.000000   \n",
       "50%    1100.500000    0.000000    3.000000   27.000000    0.000000   \n",
       "75%    1204.750000    1.000000    3.000000   39.000000    1.000000   \n",
       "max    1309.000000    1.000000    3.000000   76.000000    8.000000   \n",
       "\n",
       "            Parch        Fare  \n",
       "count  418.000000  417.000000  \n",
       "mean     0.392344   35.627188  \n",
       "std      0.981429   55.907576  \n",
       "min      0.000000    0.000000  \n",
       "25%      0.000000    7.895800  \n",
       "50%      0.000000   14.454200  \n",
       "75%      0.000000   31.500000  \n",
       "max      9.000000  512.329200  "
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Data.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "89b1e411",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-27T23:53:35.029459Z",
     "iopub.status.busy": "2024-05-27T23:53:35.029019Z",
     "iopub.status.idle": "2024-05-27T23:53:35.035327Z",
     "shell.execute_reply": "2024-05-27T23:53:35.034356Z"
    },
    "papermill": {
     "duration": 0.020376,
     "end_time": "2024-05-27T23:53:35.037529",
     "exception": false,
     "start_time": "2024-05-27T23:53:35.017153",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(418, 12)"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Data.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "2bc00dbd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-27T23:53:35.060275Z",
     "iopub.status.busy": "2024-05-27T23:53:35.059859Z",
     "iopub.status.idle": "2024-05-27T23:53:35.065934Z",
     "shell.execute_reply": "2024-05-27T23:53:35.065181Z"
    },
    "papermill": {
     "duration": 0.019902,
     "end_time": "2024-05-27T23:53:35.067957",
     "exception": false,
     "start_time": "2024-05-27T23:53:35.048055",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['PassengerId', 'Survived', 'Pclass', 'Name', 'Sex', 'Age', 'SibSp',\n",
       "       'Parch', 'Ticket', 'Fare', 'Cabin', 'Embarked'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Data.columns"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7fd49260",
   "metadata": {
    "papermill": {
     "duration": 0.010428,
     "end_time": "2024-05-27T23:53:35.089021",
     "exception": false,
     "start_time": "2024-05-27T23:53:35.078593",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Data cleaning"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "8f17e1e1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-27T23:53:35.112615Z",
     "iopub.status.busy": "2024-05-27T23:53:35.111690Z",
     "iopub.status.idle": "2024-05-27T23:53:35.119787Z",
     "shell.execute_reply": "2024-05-27T23:53:35.118704Z"
    },
    "papermill": {
     "duration": 0.022444,
     "end_time": "2024-05-27T23:53:35.121964",
     "exception": false,
     "start_time": "2024-05-27T23:53:35.099520",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "86"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Data[\"Age\"].isna().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "63b0b8f4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-27T23:53:35.144851Z",
     "iopub.status.busy": "2024-05-27T23:53:35.144101Z",
     "iopub.status.idle": "2024-05-27T23:53:35.149784Z",
     "shell.execute_reply": "2024-05-27T23:53:35.148936Z"
    },
    "papermill": {
     "duration": 0.019324,
     "end_time": "2024-05-27T23:53:35.151889",
     "exception": false,
     "start_time": "2024-05-27T23:53:35.132565",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# fill the nan values of ages with average values in coulmn\n",
    "Data[\"Age\"]=Data[\"Age\"].fillna(Data[\"Age\"].mean())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "9f96e305",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-27T23:53:35.174969Z",
     "iopub.status.busy": "2024-05-27T23:53:35.174397Z",
     "iopub.status.idle": "2024-05-27T23:53:35.180513Z",
     "shell.execute_reply": "2024-05-27T23:53:35.179518Z"
    },
    "papermill": {
     "duration": 0.020119,
     "end_time": "2024-05-27T23:53:35.182674",
     "exception": false,
     "start_time": "2024-05-27T23:53:35.162555",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Data[\"Age\"].isna().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "1a7df942",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-27T23:53:35.206008Z",
     "iopub.status.busy": "2024-05-27T23:53:35.205378Z",
     "iopub.status.idle": "2024-05-27T23:53:35.212271Z",
     "shell.execute_reply": "2024-05-27T23:53:35.211337Z"
    },
    "papermill": {
     "duration": 0.021495,
     "end_time": "2024-05-27T23:53:35.214756",
     "exception": false,
     "start_time": "2024-05-27T23:53:35.193261",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "Data=Data.drop(\"Cabin\",axis=1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2c378d49",
   "metadata": {
    "papermill": {
     "duration": 0.010339,
     "end_time": "2024-05-27T23:53:35.235776",
     "exception": false,
     "start_time": "2024-05-27T23:53:35.225437",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Catorize the coulmn based on data type"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "6890d30e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-27T23:53:35.258713Z",
     "iopub.status.busy": "2024-05-27T23:53:35.258293Z",
     "iopub.status.idle": "2024-05-27T23:53:35.266111Z",
     "shell.execute_reply": "2024-05-27T23:53:35.265022Z"
    },
    "papermill": {
     "duration": 0.02182,
     "end_time": "2024-05-27T23:53:35.268207",
     "exception": false,
     "start_time": "2024-05-27T23:53:35.246387",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['Name', 'Sex', 'Ticket', 'Embarked']"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#obj coulmn\n",
    "obj_col=[col for col in Data.columns if Data[col].dtype==object]\n",
    "obj_col"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "052624df",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-27T23:53:35.291846Z",
     "iopub.status.busy": "2024-05-27T23:53:35.291215Z",
     "iopub.status.idle": "2024-05-27T23:53:35.298426Z",
     "shell.execute_reply": "2024-05-27T23:53:35.297391Z"
    },
    "papermill": {
     "duration": 0.021601,
     "end_time": "2024-05-27T23:53:35.300481",
     "exception": false,
     "start_time": "2024-05-27T23:53:35.278880",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['PassengerId', 'Survived', 'Pclass', 'Age', 'SibSp', 'Parch', 'Fare']"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#numeric Data\n",
    "num_col=[col for col in Data.columns if Data[col].dtype in ['float32', 'float64', 'int32', 'int64']]\n",
    "num_col"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "e18577c0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-27T23:53:35.324753Z",
     "iopub.status.busy": "2024-05-27T23:53:35.324136Z",
     "iopub.status.idle": "2024-05-27T23:53:35.335480Z",
     "shell.execute_reply": "2024-05-27T23:53:35.334396Z"
    },
    "papermill": {
     "duration": 0.026261,
     "end_time": "2024-05-27T23:53:35.337618",
     "exception": false,
     "start_time": "2024-05-27T23:53:35.311357",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<bound method DataFrame.duplicated of      PassengerId  Survived  Pclass  \\\n",
       "0            892         0       3   \n",
       "1            893         1       3   \n",
       "2            894         0       2   \n",
       "3            895         0       3   \n",
       "4            896         1       3   \n",
       "..           ...       ...     ...   \n",
       "413         1305         0       3   \n",
       "414         1306         1       1   \n",
       "415         1307         0       3   \n",
       "416         1308         0       3   \n",
       "417         1309         0       3   \n",
       "\n",
       "                                             Name     Sex       Age  SibSp  \\\n",
       "0                                Kelly, Mr. James    male  34.50000      0   \n",
       "1                Wilkes, Mrs. James (Ellen Needs)  female  47.00000      1   \n",
       "2                       Myles, Mr. Thomas Francis    male  62.00000      0   \n",
       "3                                Wirz, Mr. Albert    male  27.00000      0   \n",
       "4    Hirvonen, Mrs. Alexander (Helga E Lindqvist)  female  22.00000      1   \n",
       "..                                            ...     ...       ...    ...   \n",
       "413                            Spector, Mr. Woolf    male  30.27259      0   \n",
       "414                  Oliva y Ocana, Dona. Fermina  female  39.00000      0   \n",
       "415                  Saether, Mr. Simon Sivertsen    male  38.50000      0   \n",
       "416                           Ware, Mr. Frederick    male  30.27259      0   \n",
       "417                      Peter, Master. Michael J    male  30.27259      1   \n",
       "\n",
       "     Parch              Ticket      Fare Embarked  \n",
       "0        0              330911    7.8292        Q  \n",
       "1        0              363272    7.0000        S  \n",
       "2        0              240276    9.6875        Q  \n",
       "3        0              315154    8.6625        S  \n",
       "4        1             3101298   12.2875        S  \n",
       "..     ...                 ...       ...      ...  \n",
       "413      0           A.5. 3236    8.0500        S  \n",
       "414      0            PC 17758  108.9000        C  \n",
       "415      0  SOTON/O.Q. 3101262    7.2500        S  \n",
       "416      0              359309    8.0500        S  \n",
       "417      1                2668   22.3583        C  \n",
       "\n",
       "[418 rows x 11 columns]>"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Data.duplicated"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "5a3cc669",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-27T23:53:35.361667Z",
     "iopub.status.busy": "2024-05-27T23:53:35.361022Z",
     "iopub.status.idle": "2024-05-27T23:53:35.365700Z",
     "shell.execute_reply": "2024-05-27T23:53:35.364964Z"
    },
    "papermill": {
     "duration": 0.019173,
     "end_time": "2024-05-27T23:53:35.367721",
     "exception": false,
     "start_time": "2024-05-27T23:53:35.348548",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "Data=pd.DataFrame(Data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "f733c328",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-27T23:53:35.392225Z",
     "iopub.status.busy": "2024-05-27T23:53:35.391610Z",
     "iopub.status.idle": "2024-05-27T23:53:35.402287Z",
     "shell.execute_reply": "2024-05-27T23:53:35.401393Z"
    },
    "papermill": {
     "duration": 0.025812,
     "end_time": "2024-05-27T23:53:35.404578",
     "exception": false,
     "start_time": "2024-05-27T23:53:35.378766",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "Data=Data.drop_duplicates()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "06c28bdf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-27T23:53:35.428290Z",
     "iopub.status.busy": "2024-05-27T23:53:35.427917Z",
     "iopub.status.idle": "2024-05-27T23:53:35.436795Z",
     "shell.execute_reply": "2024-05-27T23:53:35.435776Z"
    },
    "papermill": {
     "duration": 0.023293,
     "end_time": "2024-05-27T23:53:35.438926",
     "exception": false,
     "start_time": "2024-05-27T23:53:35.415633",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Data.duplicated().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "623db415",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-27T23:53:35.464437Z",
     "iopub.status.busy": "2024-05-27T23:53:35.463773Z",
     "iopub.status.idle": "2024-05-27T23:53:35.474271Z",
     "shell.execute_reply": "2024-05-27T23:53:35.473385Z"
    },
    "papermill": {
     "duration": 0.025717,
     "end_time": "2024-05-27T23:53:35.476322",
     "exception": false,
     "start_time": "2024-05-27T23:53:35.450605",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "PassengerId    418\n",
       "Survived         2\n",
       "Pclass           3\n",
       "Name           418\n",
       "Sex              2\n",
       "Age             80\n",
       "SibSp            7\n",
       "Parch            8\n",
       "Ticket         363\n",
       "Fare           169\n",
       "Embarked         3\n",
       "dtype: int64"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Data.nunique()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "eaa8de42",
   "metadata": {
    "papermill": {
     "duration": 0.011202,
     "end_time": "2024-05-27T23:53:35.498860",
     "exception": false,
     "start_time": "2024-05-27T23:53:35.487658",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Data visualization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "b36b240d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-27T23:53:35.524496Z",
     "iopub.status.busy": "2024-05-27T23:53:35.524006Z",
     "iopub.status.idle": "2024-05-27T23:53:37.114358Z",
     "shell.execute_reply": "2024-05-27T23:53:37.112479Z"
    },
    "papermill": {
     "duration": 1.60668,
     "end_time": "2024-05-27T23:53:37.117335",
     "exception": false,
     "start_time": "2024-05-27T23:53:35.510655",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'Figure that show the relation between gender and survives or not')"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 800x800 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "# create a figure that show the relation between gender and survives or not\n",
    "plt.figure(figsize=(8,8),clear=False)\n",
    "sns.barplot(data=Data,x=\"Sex\",y=\"Survived\",palette=\"viridis\")\n",
    "font={\"size\":15, \"weight\":\"bold\",\"color\":\"green\"}\n",
    "plt.xlabel(\"Gender\",fontdict=font)\n",
    "plt.ylabel(\"Result of survived\",fontdict=font)\n",
    "plt.yticks([0,1])\n",
    "plt.title(\"Figure that show the relation between gender and survives or not\",fontdict=font)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "114d2eb2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-27T23:53:37.205468Z",
     "iopub.status.busy": "2024-05-27T23:53:37.204997Z",
     "iopub.status.idle": "2024-05-27T23:53:37.603011Z",
     "shell.execute_reply": "2024-05-27T23:53:37.601732Z"
    },
    "papermill": {
     "duration": 0.473281,
     "end_time": "2024-05-27T23:53:37.606685",
     "exception": false,
     "start_time": "2024-05-27T23:53:37.133404",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'Figure that show the relation between pclass and survives or not')"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 800x800 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# create a figure that show the relation between pclass and survives or not\n",
    "plt.figure(figsize=(8,8),clear=False)\n",
    "sns.barplot(data=Data,x=\"Pclass\",y=\"Survived\",palette=\"plasma\")\n",
    "font={\"size\":15, \"weight\":\"bold\",\"color\":\"green\"}\n",
    "plt.xlabel(\"Pclass\",fontdict=font)\n",
    "plt.ylabel(\"Result of survived\",fontdict=font)\n",
    "plt.yticks([0,1])\n",
    "plt.title(\"Figure that show the relation between pclass and survives or not\",fontdict=font)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "866c1e57",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-27T23:53:37.642421Z",
     "iopub.status.busy": "2024-05-27T23:53:37.642042Z",
     "iopub.status.idle": "2024-05-27T23:53:37.931890Z",
     "shell.execute_reply": "2024-05-27T23:53:37.930510Z"
    },
    "papermill": {
     "duration": 0.309273,
     "end_time": "2024-05-27T23:53:37.935145",
     "exception": false,
     "start_time": "2024-05-27T23:53:37.625872",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'Figure that show the relation between Embarked and survives or not')"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 800x800 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# create a figure that show the relation between Embarked'and survives or not\n",
    "plt.figure(figsize=(8,8),clear=False)\n",
    "sns.barplot(data=Data,x=\"Embarked\",y=\"Survived\",palette=\"magma\")\n",
    "font={\"size\":15, \"weight\":\"bold\",\"color\":\"green\"}\n",
    "plt.xlabel(\"Embarked\",fontdict=font)\n",
    "plt.ylabel(\"Result of survived\",fontdict=font)\n",
    "plt.yticks([0,1])\n",
    "plt.title(\"Figure that show the relation between Embarked and survives or not\",fontdict=font)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "851f1cc3",
   "metadata": {
    "papermill": {
     "duration": 0.013514,
     "end_time": "2024-05-27T23:53:37.964086",
     "exception": false,
     "start_time": "2024-05-27T23:53:37.950572",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "#  Data preprocessing"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "9d219c77",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-27T23:53:37.992633Z",
     "iopub.status.busy": "2024-05-27T23:53:37.992235Z",
     "iopub.status.idle": "2024-05-27T23:53:37.997769Z",
     "shell.execute_reply": "2024-05-27T23:53:37.996526Z"
    },
    "papermill": {
     "duration": 0.022603,
     "end_time": "2024-05-27T23:53:38.000071",
     "exception": false,
     "start_time": "2024-05-27T23:53:37.977468",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['Name', 'Sex', 'Ticket', 'Embarked']\n",
      "['PassengerId', 'Survived', 'Pclass', 'Age', 'SibSp', 'Parch', 'Fare']\n"
     ]
    }
   ],
   "source": [
    "# first remove unnessacry data such as name coulmn , tickt \n",
    "print(obj_col)\n",
    "print(num_col)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "1a656aaa",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-27T23:53:38.028902Z",
     "iopub.status.busy": "2024-05-27T23:53:38.027814Z",
     "iopub.status.idle": "2024-05-27T23:53:38.034028Z",
     "shell.execute_reply": "2024-05-27T23:53:38.033013Z"
    },
    "papermill": {
     "duration": 0.022837,
     "end_time": "2024-05-27T23:53:38.036231",
     "exception": false,
     "start_time": "2024-05-27T23:53:38.013394",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "col_drop=[\"Ticket\",\"Name\",\"PassengerId\",\"Fare\",\"Age\"]\n",
    "Data=Data.drop(col_drop,axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "313b60d5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-27T23:53:38.065414Z",
     "iopub.status.busy": "2024-05-27T23:53:38.064247Z",
     "iopub.status.idle": "2024-05-27T23:53:38.076027Z",
     "shell.execute_reply": "2024-05-27T23:53:38.074965Z"
    },
    "papermill": {
     "duration": 0.028743,
     "end_time": "2024-05-27T23:53:38.078341",
     "exception": false,
     "start_time": "2024-05-27T23:53:38.049598",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Survived</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Sex</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Embarked</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>male</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>Q</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>female</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>male</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>Q</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>male</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>female</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>male</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>female</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>Q</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>male</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>female</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>C</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>male</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Survived  Pclass     Sex  SibSp  Parch Embarked\n",
       "0         0       3    male      0      0        Q\n",
       "1         1       3  female      1      0        S\n",
       "2         0       2    male      0      0        Q\n",
       "3         0       3    male      0      0        S\n",
       "4         1       3  female      1      1        S\n",
       "5         0       3    male      0      0        S\n",
       "6         1       3  female      0      0        Q\n",
       "7         0       2    male      1      1        S\n",
       "8         1       3  female      0      0        C\n",
       "9         0       3    male      2      0        S"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# convert object data into numerical data \n",
    "Data.head(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "ac48668b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-27T23:53:38.108044Z",
     "iopub.status.busy": "2024-05-27T23:53:38.107032Z",
     "iopub.status.idle": "2024-05-27T23:53:38.273626Z",
     "shell.execute_reply": "2024-05-27T23:53:38.272465Z"
    },
    "papermill": {
     "duration": 0.184126,
     "end_time": "2024-05-27T23:53:38.276230",
     "exception": false,
     "start_time": "2024-05-27T23:53:38.092104",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import sklearn\n",
    "from sklearn.preprocessing import LabelEncoder,OneHotEncoder\n",
    "# apply label encoder on sex column \n",
    "# apply onehot on embarked column\n",
    "Lb=LabelEncoder()\n",
    "On=OneHotEncoder()\n",
    "Data['Sex'] = Lb.fit_transform(Data['Sex'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "643a7f9e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-27T23:53:38.305631Z",
     "iopub.status.busy": "2024-05-27T23:53:38.304738Z",
     "iopub.status.idle": "2024-05-27T23:53:38.331393Z",
     "shell.execute_reply": "2024-05-27T23:53:38.329789Z"
    },
    "papermill": {
     "duration": 0.04384,
     "end_time": "2024-05-27T23:53:38.333810",
     "exception": false,
     "start_time": "2024-05-27T23:53:38.289970",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.10/site-packages/sklearn/preprocessing/_encoders.py:868: FutureWarning: `sparse` was renamed to `sparse_output` in version 1.2 and will be removed in 1.4. `sparse_output` is ignored unless you leave `sparse` to its default value.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Survived</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Sex</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Embarked_C</th>\n",
       "      <th>Embarked_Q</th>\n",
       "      <th>Embarked_S</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>413</th>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>414</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>415</th>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>416</th>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>417</th>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>418 rows × 8 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     Survived  Pclass  Sex  SibSp  Parch  Embarked_C  Embarked_Q  Embarked_S\n",
       "0           0       3    1      0      0         0.0         1.0         0.0\n",
       "1           1       3    0      1      0         0.0         0.0         1.0\n",
       "2           0       2    1      0      0         0.0         1.0         0.0\n",
       "3           0       3    1      0      0         0.0         0.0         1.0\n",
       "4           1       3    0      1      1         0.0         0.0         1.0\n",
       "..        ...     ...  ...    ...    ...         ...         ...         ...\n",
       "413         0       3    1      0      0         0.0         0.0         1.0\n",
       "414         1       1    0      0      0         1.0         0.0         0.0\n",
       "415         0       3    1      0      0         0.0         0.0         1.0\n",
       "416         0       3    1      0      0         0.0         0.0         1.0\n",
       "417         0       3    1      1      1         1.0         0.0         0.0\n",
       "\n",
       "[418 rows x 8 columns]"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# apply one hot encoder on embarked column\n",
    "column_to_encode = \"Embarked\"\n",
    "\n",
    "# Instantiate the OneHotEncoder\n",
    "encoder = OneHotEncoder(sparse=False)\n",
    "\n",
    "# Fit and transform the selected column\n",
    "encoded_array = encoder.fit_transform(Data[column_to_encode].values.reshape(-1,1))\n",
    "\n",
    "# Create a DataFrame from the encoded array with column names\n",
    "encoded_df = pd.DataFrame(encoded_array, columns=encoder.get_feature_names_out([column_to_encode]))\n",
    "\n",
    "# Update the original DataFrame with the encoded values\n",
    "Data.drop(column_to_encode, axis=1, inplace=True)  # Drop the original column\n",
    "Data = pd.concat([Data, encoded_df], axis=1)  # Concatenate the encoded DataFrame with the original\n",
    "\n",
    "# Display the updated DataFrame\n",
    "Data\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "4b956e59",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-27T23:53:38.363407Z",
     "iopub.status.busy": "2024-05-27T23:53:38.362983Z",
     "iopub.status.idle": "2024-05-27T23:53:38.376453Z",
     "shell.execute_reply": "2024-05-27T23:53:38.375427Z"
    },
    "papermill": {
     "duration": 0.03082,
     "end_time": "2024-05-27T23:53:38.378713",
     "exception": false,
     "start_time": "2024-05-27T23:53:38.347893",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Survived</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Sex</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Embarked_C</th>\n",
       "      <th>Embarked_Q</th>\n",
       "      <th>Embarked_S</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>413</th>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>414</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>415</th>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>416</th>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>417</th>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     Survived  Pclass  Sex  SibSp  Parch  Embarked_C  Embarked_Q  Embarked_S\n",
       "413         0       3    1      0      0         0.0         0.0         1.0\n",
       "414         1       1    0      0      0         1.0         0.0         0.0\n",
       "415         0       3    1      0      0         0.0         0.0         1.0\n",
       "416         0       3    1      0      0         0.0         0.0         1.0\n",
       "417         0       3    1      1      1         1.0         0.0         0.0"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Data.tail(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "55983fc4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-27T23:53:38.410077Z",
     "iopub.status.busy": "2024-05-27T23:53:38.409108Z",
     "iopub.status.idle": "2024-05-27T23:53:38.890119Z",
     "shell.execute_reply": "2024-05-27T23:53:38.889044Z"
    },
    "papermill": {
     "duration": 0.499351,
     "end_time": "2024-05-27T23:53:38.892858",
     "exception": false,
     "start_time": "2024-05-27T23:53:38.393507",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "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22r0693DuhzYv8/ZVaJ2SCAAzlTU4dv9hciq0GHjqXL8caocQ+P8nF01uzpVWos5G85g3uYsHC/W4h8podY87ttivCFzEeL3tOtjUKu9TEgOQainHB9vy3FqPXg9vwbMuXaodh+ukclkGDJkCIYMGYI333wTEydOxMyZM7F9+3YAsMlbrq9vZSCOq+2tMZVKhdtuuw3fffcd+vXrh++++w6TJrU+sEEikeC+++7Dd999h7Fjx+K7777DmDFjIBY3vnxarRa9evVqlmoCAH5+V/+HZ9q0aZg6darNOv+bX73q/d2IQronwzci1vq4wdT4GdHVVEHu0RRx09eo4RUS5fD6tQcDB92G7t0TrY/9AwKcWJu2U2NoQIPZ0ixS6SETo7qdDEyzhxq9CQ1mCzwviMZ7yl2uaVCmWlffLGqZr9ahX4TnVe/zamnPvpcXDthzl4mb3Zk4R6M3NSuvlDYvb2ywoKzWiLJaIKtShznDYjAg0gvrTpaji78ronwU+GR0vM02r6dGYU9uNZb9XWCH1l0ZzbnP9QV3JTzkLlC38lpcicf6BqNniBKz12egspXBj47C6zldL667rxTx8fGora21dlqLioqsz50/uPFSxo0bh5UrV2LXrl04c+YMxo4de8ny69atw/Hjx7F582abFJKePXsiPT0d/v7+iImJsVnORZwDAwOxZ88e6zYmkwn79188Ci2VSqFUKm0WgbDlkfDUMheZAu5+QdbFQxUGmdILJacOW8vU6+pQnn0KvhEt37no6Fxd3RAWHm5dZDLZpTe6DjWYLciqrENXlbt1nQBAV5Vbq1PUXY9MZgsyy+uQEKi0rhMASAhyx6kLco6vRFpJLYI8pDbrgjxkKNM6fkBjg6Vxmrwu/k2BEwGAOH/XVqdVzKzQocsFOefxAW4408p0decIBQK4nM0bXXGwGG9tyMScjY3Lx381RnI/352HVcecM7ixwWxBVkUdugU2te3c5zq9rLb1DS/DY32D0SfMA/+3IcMp7/OFeD2n60W77VxXVFTgtttuwzfffIMjR44gKysLP/74I+bPn4+RI0dCLpejX79+1oGKf/75J954443L3v+9996LmpoaTJo0CYMGDUJQUNBFy99yyy1QqVQYN24cIiMjbVI8xo0bB19fX4wcORLbt29HVlYWtm7diueeew75+fkAgOeffx7vvvsuVq1a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s2zWlZeXo6GhAQEBATbrAwICcPLkyUseZ+/evTh27Bi++OILm/XDhg3Dvffei8jISGRmZmL69Om44447sGvXLohEoqtr1CWwc01EREREbWLatGmYOnWqzbq2yHn+4osv0L17d/Tt29dm/dixY63/7969OxISEhAdHY2tW7di8ODBdq8HwLQQIiIiog6tpRk1HLVIpVIolUqbpaXOta+vL0QiEUpKSmzWl5SUQKVSXbR9tbW1WLFiBZ544olLvhZRUVHw9fVFRkbGlb2IV4CdayIiIiJyKolEgl69emHTpk3WdWazGZs2bUJKSspFt/3xxx9hMBjw8MMPX/I4+fn5qKioQGBg4DXXuTXsXBMRERGR002dOhWff/45li9fjrS0NEyaNAm1tbWYMGECAGD8+PGYNm1as+2++OILjBo1Cj4+PjbrtVot/vnPf2L37t3Izs7Gpk2bMHLkSMTExGDo0KFt1g7mXBMRERF1YILr5Bcax4wZg7KyMsyYMQPFxcVISkrCunXrrIMcc3NzIRTaxoVPnTqFv/76Cxs2bGi2P5FIhCNHjmD58uVQq9UICgrC7bffjjlz5rTpXNfsXBMRERFRuzBlyhRMmTKlxee2bt3abF1sbGyrM9DI5XKsX7/entW7LOxcExEREXVk10fgusNgzjURERERkZ2wc01EREREZCdMCyEiIiLqwK6XAY0dBSPXRERERER2wsg1ERERUQfGyLVjMXJNRERERGQnjFwTERERdWCMXDsWI9dERERERHbCzjURERERkZ0wLYSIiIioA2NaiGMxck1EREREZCeMXBMRERF1ZAxcOxQj10REREREdsLONRERERGRnTAthIiIiKgD44BGx2LkmoiIiIjIThi5JiIiIurAGLl2LEauiYiIiIjshJFrIiIiog6MkWvHYuSaiIiIiMhO2LkmIiIiIrITpoUQERERdWBMC3EsRq6JiIiIiOyEkWsiIiKijoyBa4di5PoSBg4ciBdeeMHZ1SAiIiKi68ANEbl+7LHHsHz5cgCAi4sLwsLCMH78eEyfPh1i8Q3xErTIYrHgyJpvkLFzPep1tfCLikOfMc9A6R/c6jYlGceQ9sfPqMzNgE5TiVuefAOhiSk2ZXIP7UD6X7+jMjcDxroa3PHaQniHRLd1c+xqQM9ovDg+FT3jwxDo54EHXvwMv2494uxqXZMhnX0x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5JqIiIiIyE7YuSYiIiIishOmhRARERF1YBzQ6FiMXBMRERER2Qkj10REREQdGAPXjsXINRERERGRnbBzTURERERkJ0wLISIiIurAOKDRsRi5JiIiIiKyE0auiYiIiDowBq4di5FrIiIiIiI7YeSaiIiIqANjzrVjMXJNRERERGQn7FwTEREREdkJ00KIiIiIOjCmhTgWI9dERERERHbCyDURERFRB8bAtWMxck1EREREZCfsXBMRERER2QnTQoiIiIg6MA5odCxGromIiIiI7ISRayIiIqIOjIFrx2LkmoiIiIjahUWLFiEiIgIymQzJycnYu3dvq2U///xz3HzzzfDy8oKXlxdSU1OblX/ssccgEAhslmHDhrVpG9i5JiIiIurALuxcOnK5EitXrsTUqVMxc+ZMHDhwAImJiRg6dChKS0tbLL9161Y8+OCD2LJlC3bt2oXQ0FDcfvvtKCgosCk3bNgwFBUVWZfvv//+ql/Ly8HONRERERE53Ycffognn3wSEyZMQHx8PBYvXgyFQoGlS5e2WP7bb7/F5MmTkZSUhC5dumDJkiUwm83YtGmTTTmpVAqVSmVdvLy82rQd7FwTERERUZswGAzQaDQ2i8FgaFbOaDRi//79SE1Nta4TCoVITU3Frl27LutYdXV1qK+vh7e3t836rVu3wt/fH7GxsZg0aRIqKiqurVGXwAGN15mJKw47uwpO4ekmdXYVnOLVec87uwpOMe/Vfzm7Ck7R86Exzq6CU/Tp7OfsKjhFg9ni7Co4hUjEuJ6jOXNA49y5czF79mybdTNnzsSsWbNs1pWXl6OhoQEBAQE26wMCAnDy5MnLOtarr76KoKAgmw76sGHDcO+99yIyMhKZmZmYPn067rjjDuzatQsikejqGnUJ7FwTERERUZuYNm0apk6darNOKrV/wOzdd9/FihUrsHXrVshkMuv6sWPHWv/fvXt3JCQkIDo6Glu3bsXgwYPtXg+AnWsiIiKiDk3oxNC1VCq9rM60r68vRCIRSkpKbNaXlJRApVJddNv3338f7777Lv744w8kJCRctGxUVBR8fX2RkZHRZp1r3pshIiIiIqeSSCTo1auXzWDEc4MTU1JSWt1u/vz5mDNnDtatW4fevXtf8jj5+fmoqKhAYGCgXerdEnauiYiIiMjppk6dis8//xzLly9HWloaJk2ahNraWkyY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ERGRnTByTURERNSBcSo+x2LkmoiIiIjIThi5JiIiIurAmHLtWIxcExERERHZCTvXRERERER2wrQQIiIiog5MyLwQh2LkmoiIiIjIThi5JiIiIurAOBWfYzFyTURERERkJ+xcExERERHZCdNCiIiIiDowjmd0LEauiYiIiIjshJFrIiIiog5MCIauHYmRayIiIiIiO2HkmoiIiKgDY861YzFyTURERERkJ+xcExERERHZCdNCiIiIiDow/kKjYzFyTURERERkJ4xcExEREXVgQo5odChGromIiIiI7ISdayIiIiIiO2FaCBEREVEHxqwQx2LkmoiIiIjIThi5JiIiIurAOKDRsRi5JiIiIqLrSmVlJcaNGwelUglPT0888cQT0Gq1Fy3/7LPPIjY2FnK5HGFhYXjuuedQXV1tU04gEDRbVqxYcUV1Y+SaiIiIqAPriIHrcePGoaioCBs3bkR9fT0mTJiAp556Ct99912L5QsLC1FYWIj3338f8fHxyMnJwdNPP43CwkL89NNPNmW//PJLDBs2zPrY09PziurGzjURERERXTfS0tKwbt06/P333+jduzcA4OOPP8add96J999/H0FBQc226datG37++Wfr4+joaLz99tt4+OGHYTKZIBY3dYk9PT2hUqmuun5MCyEiIiKiNmEwGKDRaGwWg8FwTfvctWsXPD09rR1rAEhNTYVQKMSePXsuez/V1dVQKpU2HWsAeOaZZ+Dr64u+ffti6dKlsFgsV1Q/Rq6vM75KmbOr4BSDoj2dXQWn2JNX4+wqOEWfzn7OroJT9JzxjLOr4BRL3lrk7Co4xfv/ftnZVXCK/xvWxdlVuOE4M5I6d+5czJ4922bdzJkzMWvWrKveZ3FxMfz9/W3WicVieHt7o7i4+LL2UV5ejjlz5uCpp56yWf/WW2/htttug0KhwIYNGzB58mRotVo899xzl10/dq6JiIiIqE1MmzYNU6dOtVknlUpbLPvaa69h3rx5F91fWlraNddJo9Fg+PDhiI+Pb9bJf/PNN63/79GjB2pra/Hee++xc01EREREjQROHNEolUpb7Uxf6KWXXsJjjz120TJRUVFQqVQoLS21WW8ymVBZWXnJXOmamhoMGzYM7u7u+OWXX+Di4nLR8snJyZgzZw4MBsNlt4OdayIiIiJyOj8/P/j5XTotMCUlBWq1Gvv370evXr0AAJs3b4bZbEZycnKr22k0GgwdOhRSqRSrV6+GTHbpVNtDhw7By8vrsjvWADvXRERERHQdiYuLw7Bhw/Dkk09i8eLFqK+vx5QpUzB27FjrTCEFBQUYPHgwvvrqK/Tt2xcajQa333476urq8M0331gHVwKNnXqRSIRff/0VJSUl6NevH2QyGTZu3Ih33nkHL798ZeMj2LkmIiIi6sA64DTX+PbbbzFlyhQMHjwYQqEQo0ePxsKFC63P19fX49SpU6irqwMAHDhwwDqTSExMjM2+srKyEBERARcXFyxatAgvvvgiLBYLYmJi8OGHH+LJJ5+8orqxc01ERERE1xVvb+9WfzAGACIiImym0Bs4cOAlp9QbNmyYzY/HXC12romIiIg6MGFH/InGdow/IkNEREREZCfsXBMRERER2QnTQoiIiIg6MCaFOBYj10REREREdsLINREREVEHxvGMjsXINRERERGRnTByTURERNSBCRi6dihGromIiIiI7ISdayIiIiIiO2FaCBEREVEHxkiqY/H1JiKi/2/vzuNjOP84gH821242933JKSGJo444grrjiJv+UNRRR1FFXUXVWVfRVhWlqkUd1YOibUrd1E1Q4kiIBEnIfe7m2Pn9ETZWEoLdnXbzefe1r1dn5pnZ77Mbu9/9zjPPEBGRlrByTURERGTAeEGjfrFyTURERESkJUyuiYiIiIi0hMNCiIiIiAwYB4XoFyvXRERERERawso1ERERkQHjBY36xco1EREREZGWsHJNREREZMBYSdUvvt5ERERERFrC5JqIiIiISEs4LISIiIjIgPGCRv1i5ZqIiIiISEtYuSYiIiIyYKxb69e/onI9e/Zs1KlTRyfHPnToECQSCdLT07V2zNjYWEgkEkRGRmrtmERERET03/fClevBgwdjw4YNpda3b98eERERWgnKEP38889YsWIFLly4gKKiIvj5+eGNN97AmDFjYG9vr/Pnb1nVHu2qO8BGZoK76QpsvZCI2LS8ctvXr2KNbjWc4WBhigfZ+fj5UhL+ScxWb+8S7IQGnjawk5uiUCUgLi0PO/95gNuppY9pYiTBtDa+8LQ1x9y9MbibodBJHytKEAQc+PFbnN3/GxQ52fCqXhNdh70PB7cq5e5zeu+vOL1vF9IfJgIAnKv4oGWvgahWtxEAIDc7Ewe2f4foS2eRkZwEC2tbBDVoijZ93oZMbqmXfpWlfXUHNPayhbmpEW6n5uHny0lIzil45j5NfWzRsqo9rKTGuJ+pxI5/HiA+veQ9e6O2CwIc5bCRmUBZqEJsWh5+i0rGg+z8UseSmxphYgsf2Jqb4sM/bkJRqNJ6H5/WMdARjb1L+vzjxcTn9rmZry1a+zuo+/zzpSTEPdHnUG8b1K9igyo2UshMjTHttxvIK6MvwS4WaF/dEW7WUhQWCYhJycU3p+9pvY8AEB7kiCY+dsX9TMnDD5EJePicfr7ua4c2AfawlpngXoYSP11KxJ20kn6aGEnQo5Yz6lexhomREaKSsrH9YiKylEXqNit6BJU67ren7+H8vUz1ckgVa7St5gAnCzPkFapwNSkbO/95gNz8olL7iqFpvap4f2Bb1Av2gpuTDXq/vxa7D10SOyytEgQBp3ZuxD9HIqDMzYa7fzBaDRwLWxePcvc589s2xJw7jrSEeJiYmcHNPxhN3xgKOzdPPUb+YgRBwMZ1q/DHrp+RnZWFGrXrYOzkGfDw9C53n7d6dkBS4v1S67v07IP3Jn2IxIR7GNirY5n7zvh4KZq3bqe1+MkwvVTlukOHDkhISNB4bN26VduxvbKCgmd/0ejLhx9+iD59+qBBgwb4448/8M8//2DZsmW4ePEiNm3apPPnD6lijf+95oI9Vx/i4323EJ+hwLjm3rCSGpfZ3s/BHMMaVcGx22mYty8GF+5lYXRTT7hbS9VtkrLysfVCAubsjcYnB28jOacA45t7w9Ks9DF71XZBel6hzvr3oo7u2oaTf/yCrsPexzvzV8FMJsOGBVNQkF86OXzM2sEJ7foNx6iFazBywVfwrVkXW5bMQFL8bQBAVmoKstKS0eGtkXhv6Xr0HP0Bbl48gx1fLdFXt0ppVdUer/va4adLSVh+NA75RSqMaFQFJkblnyCs426FrsFO2HsjGZ8duYP7mUqMaFRF4329m67AD5GJWHzwNtaeugsJJBjRuEqZpx371HFFQqZSB70rWxt/ezT3s8OPFxPx2ZE7yC9UYWSo5zP7XNfdCt1rOCPiejKWHo7FvQwlRoZ6avTZzNgIUQ+yse9mSrnHqe1mhf713HEqLgNLDt7G8mN3cO5uZrntX0XbAAe08LPHD5EJWHYoFsoiFUY39XpmP+t5WKFHLWf8cS0Znxy8jXsZCoxu4qXRz561XFDT1QrrT93D8qN3YGNugmGNSv/o/P7cfUz//Yb6cSkhS73N194cb4W440RsOhbsv4X1p+/C206GfnVdtfsivAILcyku37iH8Qt/EDsUnTn3x3ZE/vUrWg18D31mLIeJVIady6ajsKD8z7l71y+hdusu6D3jc3SfuBCqoiLs/HQ6CpTiFkSeZfv332Lnj1swdvJH+GLdZshk5pj2/kjkK8v/3FnxzRZs231A/Vi0fC0AqJNmJ2dXje3bdh/AwGGjYS6Xo0HjZnrpl7ZJJOI9KqOXSq6lUilcXV01HnZ2dgCKr0hds2YNOnfuDLlcjqCgIJw4cQLR0dFo2bIlLCws0KRJE8TExJQ67po1a+Dp6Qm5XI7evXsjIyNDve3MmTMICwuDo6MjbGxs0KJFC5w/f15jf4lEgtWrV6Nr166wsLDA/PnzSz1Hbm4uOnbsiKZNm6qHiqxbtw5BQUGQyWQIDAzEqlWrNPY5ffo06tatC5lMhpCQEFy4cKHCr9Xp06exYMECLFu2DEuWLEGTJk3g4+ODsLAw/Pzzzxg0aFCFj/Wywqo54NjtNPwdm46ELCU2n0tAfpEKTX3symzfJsABVxKzsfdGChKz8rHrygPEpSnQyr+kwn46PgNRD3KQnFOAhEwlfryYCHNTY1SxlWkcq6arJYJdLPHTxSSd9rGiBEHAid9/QouebyGoQTO4eldFr3enISstGVFnjpW7X2D9JqhWtzEc3KrA0d0TYX2HwUxmjrs3rwIAXLx88ebEuQis3wT2rh7wq1kPbfsMxfVzJ1BUJE61rrmfHf66kYIrSdlIyFJi64VEWMtMUNO1/Ep6cz87nIzLwJn4TCQ9OmNRUKRCQy8bdZuTcRm4lZqHtLxC3MtQ4o9rybAzN4W93FTjWKHetpCZGONQTJrO+lgq/qr22Hs9Bf8kZiMhU4nN5xNgIzNBLbfy+9zS3x4n7mTgdFwGkrLy8ePFROQXqdDIu6TPh2+lYf/NVNxJLTvJMJIAPWs5Y9eVB/g7Nh0PcwqQlJWPyPtZZbZ/VS397fHn9WRcTsjG/UwlNp29DxuZCWq7WZW7Tyt/B5yITcepuAwkZuXjh8jifob62AIAZCZGCPWxxY7LSbiRnIv4dAU2n0uAn4McPnaa/67zCoqQpSx5FKoE9TZfe3Ok5BTg8K00pOQW4FZKHo7fToeXnblOXouXsff4VcxZtQe7DhpWtfoxQRAQuW8nGnZ5E1XrNoGjpx/aDZuCnPQU3Dr/d7n7dZ+wAMHN2sHBwwdOXlXR9u2JyEp5gAexN/UYfcUJgoAd279Hv8HD0aR5K/j5V8OUmfORkvwQx48cKHc/Wzt72Ds4qh+njh+Gu4cnatcNAQAYGxtrbLd3cMTxwwfQvHV7mMvl+uoe/YfpZMz1vHnzMHDgQERGRiIwMBD9+vXDO++8g2nTpuHs2bMQBAFjxozR2Cc6Ohrbt2/H7t27ERERgQsXLmD06NHq7VlZWRg0aBCOHTuGkydPIiAgAOHh4cjK0vzymj17Nnr06IHLly/j7bff1tiWnp6OsLAwqFQq7Nu3D7a2tti8eTNmzpyJ+fPnIyoqCgsWLMBHH32kHvqSnZ2Nzp07Izg4GOfOncPs2bMxadKkCr8WmzdvhqWlpUZfnmRra1vhY70MY4kEXnbmiErKUa8TAEQl5cDPoewvu6oO5oh6kK2x7kpiNvwcyv5QMZZI8LqfHXLzi3D3iVPpVlJjvFXfHetP30V+ke6HA1RE2oMEZKenomqt+up1MrklqvgHIf7mlQodQ6UqwqXjB5CvVMCzWo1y2ylycyA1l8PYuOwzBLpkLzeFtcwEN5JzS+IpVCEuXQHvcpIcYwlQxUaGm0/sIwC4kZwL76eSq8fMjCVo4GWNlJx8pOeVnClysTRDu2oO2BqZAAFCmftqm4PcFDYyE9x4WPK3rihU4U6aAj7P6fOT+wgAbjzMLXefslSxkcHW3BQCgEktfDCnvT/eaVwFrlZmL9udcj3u5/Wn+hmblgdf+/L76Wkr09hHAHD9YQ58Hu3jZSuDiZFEo01Sdj5Scwvga6/5b/9/r7liYXgAJrXwQeMnfoQAwO3UPNjJTRHsYgGg+HOgjocVriZqfqaQ7mQ+TERuRio8g+up10nlFnDxC0RCTFSFj5OfV/y3ILMo/0ebmBLv30NqSjLqhTRWr7OwtEJgcC1E/XOxQscoKCjA/j9/Q/vO3cudru7GtauIuXkNHbr00ErcYjCCRLRHZfRSs4Xs2bMHlpaalaDp06dj+vTpAIAhQ4agd+/eAIAPPvgAoaGh+Oijj9C+fXsAwLhx4zBkyBCN/RUKBTZu3AgPj+LxYCtWrECnTp2wbNkyuLq6onXr1hrt165dC1tbWxw+fBidO3dWr+/Xr5/GsW/dugUASExMRJ8+fRAQEIAtW7bAzKz4S2/WrFlYtmwZevbsCQDw9fXF1atXsWbNGgwaNAhbtmyBSqXCN998A5lMhho1auDu3bsYNWpUhV6rmzdvws/PD6amps9v/BSlUgnlU6e2igryYWxa8S9sS6kxjI0kyFRoDsvIUhTCzarsZNlaZlKqfaayEDYyzT+XWm6WGN64CsyMjZChKMRnR2KR/cSYyiENPHD4VirupCngIH/x/utCdnoqAMDSRrNqb2Fjp95WnsS4W/h6xrsoLMiHmcwc/SbNhXMVnzLb5mRm4NAvmxDStnOZ23XN+tGQnyzlU++7slC97WkWZsV/K0/vk60sgrOl5t9cE29bdA52gtTECA+ylVhz8i6KHuXQxkYSDKjnht1XHyI9r1Bv772VtPjvs8w+y8r+qLOQmpTZ5yxlIVzK+fdRFgeL4j52qO6Inf88QGpuPlr522NMUy8s2H8LuQXa+3H5uC9ZCs0zIlmKouf2M1NZeh8Xy+LhXlYyExQUqZD3VKxZikJYyUr+ZvZcfYgbD3NQUKRCoLMler/mCqmxEQ7fKj5DcTs1DxvO3MOQBh4wNTaCsZEElxOysP1i4qt1nCosN7P4s0xubauxXm5ti9yMZ3/OPSaoVDiy9Su4+deAQzmfc2JLTU0GANjaO2ist7N3QFpq+UO4nvT3kQPIzs5Cu/Bu5baJ2P0LvHz8UKNWnZeOlSqXl0quW7VqhdWrV2use/KivNq1a6v/38XFBQBQq1YtjXUKhQKZmZmwtrYGAHh5eakTawAIDQ2FSqXC9evX4erqiqSkJMyYMQOHDh3CgwcPUFRUhNzcXMTFxWnEERISUmbMYWFhaNiwIX744Qd1JTEnJwcxMTEYOnQohg8frm5bWFgIG5viakxUVBRq164NmaykchcaGlqBV6mYILx81W7hwoWYM2eOxrp6b4xC/d7vvvQxten6gxzM23sLllJjvO5nh3dCPbFw/y1kKYvQ2t8eMlMj/BGVLGqMF4/uw66vP1UvD5i68KWP5ejuidGfrIMiNxtXTh7BzysXYejsz0sl2IrcHHy/eCqcq3ij9RuDX/r5XkQ9Dyu8UbtkTOu603d1+nzn72XiRnIOrKUmaFnVHm/Vd8eXx+NQqBLQKdARSdn5Ghe46UL9Ktbo/VpJn9eejNfp8z2L5FF1Zt+NZPX44y0XEjGnXVXUcbfG33fSX/rYIVWs0beum3r5q7/F6ycA/Hm95N/03QwlzEwkaBPgoE6uXa3M8EZtF0RcT0ZUUg6sZSboXtMZfeu4YcuFBLHCNmjXThzAwY3L1ctdxs975WMe+v5LpNy7gzemLXvlY2nL/j9/w/JP5qqXP1668pWPGbF7Bxo0bgoHJ+cytyuVChzc9wf6Dx7xys8lpso69lksL5VcW1hYwN/fv9ztT1ZpH59mKWudSlXxas6gQYOQkpKC5cuXw9vbG1KpFKGhoch/6iI0CwuLMvfv1KkTfv75Z1y9elWd6GdnF5+m/Prrr9GoUSON9to6lV+tWjUcO3YMBQUFL1y9njZtGiZMmKCx7v09pceqP0u2sghFKqFURctKZoIMRdkXGWYqSlf6rKWl2+cXCXiYk4+HOcXVqnkd/NHU1w4R15IR6GwBPwc5VvUK1tjnw7Z+OBWXge/O6GYGhacFhjRFlYCSGB5fzJOdkQYru5JqR05GGlx9yv+bBgATE1M4uBb/APTwq457Mddw4vef0W3ERHUbZV4uNi78AGYyOd6cOA/GJvqZSv5KYjbupMWWxProwjYrqYnGTA9W0uJZIsqSk1/8t/K4AvyYpdS4VGVXUaiColCF5JwC3Em7h3kdAlDL1RIX7mfB31EON2upevzv4w/1ue39sf9mCv68UbGK0vP8k5iNO2m31ctP9jmzVJ/LHiudoywss89W0tJnb54l89Hrk5hV8nlUpBKQklsAW/mr/Q1cTsxG7IFb6mV1P2XG6ud9vHwvvZz39lE/nz5r8eQxshSFMDU2grmpkUb12kpmUqpK/qQ7qQp0DDSFiZEEhSoBYdUccSs1D/tvFldI72cqsf1iIt5v7oM9Vx9qxEza4VenMVz9qquXiwqLh2jlZqbDwrbkcy43Mx1OXlWfe7xD33+J2xdPodfUZbCyd9J+wC8ptFlLBNYoKdQ9vgg9PTUFDo4lcaalpqBqQPVS+z8tKeE+Lpw9iZkLPiu3zdED+6BU5KFtxy6vEDlVNv+am8jExcXh/v37cHd3BwCcPHkSRkZGqF69+B/I8ePHsWrVKoSHhwMA4uPjkZxc8arookWLYGlpiTZt2uDQoUMIDg6Gi4sL3N3dcevWLfTv37/M/YKCgrBp0yYoFAp19frkyZMVft5+/frhiy++wKpVqzBu3LhS29PT08sddy2VSiGVSjXWvciQEAAoEoqnyQt0tlBfXCUBEORsgYPRZZ8ejEnJQ6CzpfrLEQCCXSxxKyW3zPaPGUkkMH30xb/tQiJ2/vNAvc3W3ATjm/vg65PxuFXGdH26IjWXQ2pecnpfEARY2trj1uXzcHuUTCtyc3A3OgoNwso/LVgWQRDUX2KPj7NxwRQYm5qi/5T5MDXT/njb8iiLBChzNWfHyVQUIsBRjvuPZuuQmhjBy1aGv2PTyzxGkQDczVAgwFGunnZRAiDAUY7j5exT3EgCiaQk6dtw9j5MjUvKJJ62MvSt44aVf8ch5TlTxb0IZaEKyqemw8tQFCLAyQL3nuizt50Mx2PLvqhS3WcnC1x+os/VnOQ4erviF2LGpytQUKSCs6WZejpKIwlgb26KtNxX63N5/azuZKH+oSQzMYKPnTmO3Uov8xhFQnGM1ZwscCnhyX5a4OijinNcugKFKgHVnCxw8dFnhbOlGezlpridWv6/fQ8bKXLySy5qNDOWQPXUCTv1MqtnOmFmLofZU59zcht7xF+9oE6mlXk5SLp1DbVblT9UTRAEHN68EjHn/0avD5bAxunfM8MLAMgtLCB/ooAmCALsHRxx4ewpVK0WCADIycnGtauX0blH7+ce78/fdsLWzh6NmrxebpuIPTvQuFlL2NrpfspcMhwvlVwrlUokJmqOnzMxMYGjo+NLByKTyTBo0CAsXboUmZmZGDt2LHr37g1X1+J/3AEBAdi0aRNCQkKQmZmJyZMnw9z8xa4+X7p0KYqKitC6dWscOnQIgYGBmDNnDsaOHQsbGxt06NABSqUSZ8+eRVpaGiZMmIB+/frhww8/xPDhwzFt2jTExsZi6dKlFX7ORo0aYcqUKZg4cSLu3buHHj16wN3dHdHR0fjqq6/QrFmzMpNubdp3IwVDGnrgTloebqfmoW2AA8xMjNQJx5AGHkjPK8COR8nw/pspmNzSF2HVHHA5IQsNPG3gbS/DpnPF84KaGUsQHuSEi/ezkKEohKWZMVr528PW3ARnH009lppXADyRQz9ODh5kF4g6LZ9EIkFo+Bs4tGMT7N08YOfshv0/rIeVnSOCGpRMsfTtvAkIavA6GncovoBl75avUa1OQ9g4ukCpyMWlY/sRezUSA6d/AqA4sd4wfzIK8pXoN2Y6lHm5UOYVJyQW1jYwMtL/RY1HbqWhbYADknPykZJbgI6BjshUFGrMVz6ycRVcTsxWJ89HbqWhbx1XxKcrEJeuQHM/O5gZG+F0XPHMPfZyU9Rxt8KNhznIzi+CrcwErf0dUFAkIOpB8cVPKU8lkxaPpnpLysrX+TzXR2JS0a6aAx7m5CM1pwDhQY7IUBTickJJn0c38cSlhCwcu13c50PRqehXzw3x6XmIS1OgRdXiPp+KK5mtyEpqDGupCRwfja12s5ZCWahCWl4BcguKk9+/Y9PRMdAR6XkFSMsrVM+uo4sZQw5Fp6J9dUc8yC5+bzsHOSFDUagxJd6Ypl64lJCFI4+S54PRKRhQ3x1x6QrcSctDy6r2kBob4eSjISuKQhVOxKajZy0X5OYXQVGowhu1XXArJRexj+bCrulqCSupCWJT81CgUiHQ2QLtqjviwBNTFP6TmI0367qhma+telhIr9ouiE3Ne6GzAbpkYW6Gqp4llU4fDwfUruaBtMxcxCfqb3YbXZFIJKgT1h1n9myFrYsHrJ1ccXLHBljYOsCvXhN1u1+WfICq9ZrgtTbFhYVD33+J6ycPovPY2TCVmSPn0fhsqbkFTMykZT6XmCQSCXr0HoAtG9bCw9MLru4e+G7tSjg4OqFp85LrtKa8NwxNW7RBtzfeVK9TqVTY+9uvCOvYtdwzjPfuxuFy5Dl8vOzVh5+ITcJftnr1Usl1REQE3NzcNNZVr14d165de+lA/P390bNnT4SHhyM1NRWdO3fWmBLvm2++wYgRI1CvXj14enpiwYIFLzRrx2OfffaZRoI9bNgwyOVyLFmyBJMnT4aFhQVq1aqF8ePHAwAsLS2xe/dujBw5EnXr1kVwcDAWL16MXr16Vfg5Fy9ejPr162PlypX46quvoFKpULVqVbzxxht6mYrv7N1MWElN0LWGM6wf3UTmi6N31MMF7OWmGjM63ErJw7pTd9GtpjO613TGg+x8rDoer66AqgTA1UqK0Ca2sDQzRk5+EWJT8/DJwdt6ndP4Zb3etS8KlHnYtXYZFLnZ8KpeCwOnLdaoNKcm3UduVklylZOZhp9XLURWWipkcgu4ePlh4PRP4F+7eIx/wu2buBtdfBX+Z+MGaDzfhBVbYees/wrQwZhUmJlI8EZtV/UNVdaeuqsxbZqDhZk6+QWKE0ELM2O0r+4Ia6kx7mUq8fWpu+oLVQuLVPCzN0dzPzuYmxojW1mIWyl5WHHsjsbFrGLZH50KMxMj9HmtuM+3UvOw5kS8Rp8dLcxgaVby0XfhfhYspMboGOik7vOak/HIfmJoSVMfO3QILCkejH29+AYVW84n4HR88d/Jr1ceoEgQMKCeO0yNJbiTpsDKv+NKXSCoDX/dTIGZiQRv1nUr7mdKHlb9/XQ/TTXe2/P3smApfYBOQU6wkhrjXoYSq/6O0xg29MvlJAgQMPTRfOjXHmTjh8iSQkqRSsDrfnboWcsZEokED7PzseNyksbZkFNxGZCaGKG5nz161HRBXkERbjzMxa9XSs5kia1esDf2rispanwyqfjzfNOukxgx63uxwtKq+h17o1CpwIENy4tvIhNQA90mzIfJE2c/Mx4kIC+r5NqIywf3AAB+WTxZ41ht356I4Gb/zhun9B4wBApFHj5fPBfZ2VmoWbsuFny6GmZPnPVNuHcXGemaP5rOnzmJB0kJaN+5e7nH/nPPDjg6u6B+wybltiEqi0R4lSvuSO9G/Fix6eIMTduAsufkNnSn4nUzT/K/XdHT4woqicra73Vz//uVwZex9MsXLxAZgs6Bbs9vZIC8HcSr/v8u4o/b8BplXyxqyHQyzzURERERUWXE5PoVjRw5EpaWlmU+Ro4cKXZ4RERERKRH/5rZQv6r5s6dW+7Y78dzeBMRERGJpbLeKVEsTK5fkbOzM5ydK994IiIiIiIqjck1ERERkQHjHRr1i2OuiYiIiIi0hJVrIiIiIgPGyrV+sXJNRERERKQlTK6JiIiIiLSEw0KIiIiIDJiEU/HpFSvXRERERERawso1ERERkQEzYuFar1i5JiIiIiLSEibXRERERERawmEhRERERAaMFzTqFyvXRERERERawso1ERERkQHjHRr1i5VrIiIiIiItYeWaiIiIyIBxzLV+sXJNRERERKQlTK6JiIiIiLSEw0KIiIiIDBjv0KhfrFwTEREREWkJK9dEREREBowXNOoXK9dERERERFrC5JqIiIiISEs4LISIiIjIgPEOjfrFyjURERERkZawck1ERERkwFi41i9WromIiIjoPyU1NRX9+/eHtbU1bG1tMXToUGRnZz9zn5YtW0IikWg8Ro4cqdEmLi4OnTp1glwuh7OzMyZPnozCwsIXio2VayIiIiIDZmSAg6779++PhIQE7Nu3DwUFBRgyZAhGjBiBLVu2PHO/4cOHY+7cuepluVyu/v+ioiJ06tQJrq6u+Pvvv5GQkICBAwfC1NQUCxYsqHBsTK6JiIiI6D8jKioKEREROHPmDEJCQgAAK1asQHh4OJYuXQp3d/dy95XL5XB1dS1z2969e3H16lX89ddfcHFxQZ06dTBv3jx88MEHmD17NszMzCoUH4eFEBEREZFOKJVKZGZmajyUSuUrHfPEiROwtbVVJ9YA0LZtWxgZGeHUqVPP3Hfz5s1wdHREzZo1MW3aNOTm5moct1atWnBxcVGva9++PTIzM3HlypUKx8fK9X9MVl6B2CGI4qsjd8QOQRStgp3EDkEURSpB7BBEITOpnPWOpV9OEjsEUUwas1TsEERR+4d5YocgCm8HqWjPLeagkIULF2LOnDka62bNmoXZs2e/9DETExPh7Oyssc7ExAT29vZITEwsd79+/frB29sb7u7uuHTpEj744ANcv34dv/zyi/q4TybWANTLzzru05hcExEREZFOTJs2DRMmTNBYJ5WW/UNj6tSpWLx48TOPFxUV9dKxjBgxQv3/tWrVgpubG9q0aYOYmBhUrVr1pY/7NCbXRERERIZMxNK1VCotN5l+2sSJEzF48OBntvHz84OrqysePHigsb6wsBCpqanljqcuS6NGjQAA0dHRqFq1KlxdXXH69GmNNklJSQDwQsdlck1EREREonNycoKT0/OHQ4aGhiI9PR3nzp1D/fr1AQAHDhyASqVSJ8wVERkZCQBwc3NTH3f+/Pl48OCBetjJvn37YG1tjeDg4Aoft3IO8CMiIiKi/6SgoCB06NABw4cPx+nTp3H8+HGMGTMGffv2Vc8Ucu/ePQQGBqor0TExMZg3bx7OnTuH2NhY7Nq1CwMHDkTz5s1Ru3ZtAEC7du0QHByMt956CxcvXsSff/6JGTNm4N13361w9R1gck1ERERk0CQi/qcrmzdvRmBgINq0aYPw8HA0a9YMa9euVW8vKCjA9evX1bOBmJmZ4a+//kK7du0QGBiIiRMnolevXti9e7d6H2NjY+zZswfGxsYIDQ3FgAEDMHDgQI15sSuCw0KIiIiI6D/F3t7+mTeM8fHxgSCUzDzl6emJw4cPP/e43t7e+P33318pNibXRERERAbMAG/Q+K/GYSFERERERFrC5JqIiIiISEs4LISIiIjIgHFUiH6xck1EREREpCWsXBMREREZMpau9YqVayIiIiIiLWHlmoiIiMiA6fJmLlQaK9dERERERFrC5JqIiIiISEs4LISIiIjIgPEOjfrFyjURERERkZawck1ERERkwFi41i9WromIiIiItITJNRERERGRlnBYCBEREZEh47gQvWLlmoiIiIhIS1i5JiIiIjJgvEOjfrFyTURERESkJaxcExERERkw3kRGv1i5JiIiIiLSEibXRERERERawmEhRERERAaMo0L0i5VrIiIiIiItYeWaiIiIyJCxdK1XoleuZ8+ejTp16ujk2IcOHYJEIkF6errWjhkbGwuJRILIyEitHZOIiIiIDMMLVa4HDx6MDRs2lFrfvn17REREaC0oQ7NhwwZ8+eWXuHLlCoyNjVGvXj1MnjwZnTt3FjWusOqO6FLDGTbmJohLzcN3p+8hJiW3zLZVbGR4o44r/BzkcLI0w8Yz9/BH1EONNt1qOqOBly3cbaTIL1ThxsNcbD1/HwmZSn10p8K61XZBn3rusJebISY5BysOx+JaUnaZbTvVcEZYoBN8HeQAgBsPsvHNiXiN9lPaVkWHYGeN/U7fScfUX6N014mXIAgCLv32PW4e/xMFeTlw8gtCw77vwtrZo9x9km7+g6t//YzU+GjkZaSixYgZ8HwtVL1dVVSIyN0bcf/KWWQlJ8LM3AKu1eugbrfBkNs66KNbGgRBwOXfNyPm7+I+OvoGoUGf0bB6Rh8B4MaRPbi2/xfkZabBzsMX9d94Bw4+1dXbsx4mIHLnN3h46yqKCgvgFlQf9d94B+bWduo2qfHRiPz1O6TG3YREYgTPOk1Qt+cwmErNddbfZxEEARf2fI8bxyKQn5cDZ79ghPZ7FzbPeC0Sb17GP/t+RnJc8fvd+p0Z8K7TRKPNhT3f4/bZI8hJewgjY1M4ePmjfreBcPIN1HWXXoogCDi1cyP+ORIBZW423P2D0WrgWNi6lP86nPltG2LOHUdaQjxMzMzg5h+Mpm8MhZ2bpx4j176m9ari/YFtUS/YC25ONuj9/lrsPnRJ7LBeiSAI+HXz1zi691fk5mTDP6gWBoyeAhd3rwrt//uPG/HLxlVo27UP+g5/HwCQnHQfU4f1LLP9yA/mI6RZG63FT4bphSvXHTp0QEJCgsZj69atuojtlRQUFIgdAgBg0qRJeOedd9CnTx9cunQJp0+fRrNmzdCtWzd8+eWXosXV2McWb4W44+eLiZi+5zrupOVhals/WMvK/r1lZiLBg+x8bD1/H2m5Zb+2QS6W2Hs9GTN/v4kFf8XAxAiY1rYqpCainyBRaxnggFGv+2Djqbt4Z9slxCTnYnG3INial93v1zysceBGMib8cgVjfryMh9n5+KR7EBwtzDTanYpNQ691Z9WPjyNu6KM7L+Tqvp9w7dBuNOr7LjpM/hQmZjIc+PIjFBXkl7tPYb4CdlV80aD3qHK2K5EaH4NaHd5E+NQv0Hz4h8hMuotDa+bqqhvPFPXXz7hxeDca9HkXYROXwUQqw8FVM5/ZxzvnjuDCjnWo2fFNdJiyHLYevji4aiYUWekAgEKlAodWfQRAgtbvLUDY+0ugKizEkTVzIahUAIDcjBQc/HIGrJzc0G7iMrQcPQcZCXE49f1neuh12S7v/QlRB3chtN8YdJ7yGUykMuz94iMUPuv9Vipg5+GL0L6jy21j7eyBxn1GofuMVQiftASWDs7484sZUGRl6KIbr+zcH9sR+devaDXwPfSZsRwmUhl2Lpv+zNfh3vVLqN26C3rP+BzdJy6EqqgIOz+djgKlQo+Ra5+FuRSXb9zD+IU/iB2K1kT8vAn792zHgNEfYPrSdZDKzPHZzPEoyH9+Uef2jas4ErEDVXz8NdbbO7pg2cbfNB7d+g2H1FyOmvVDyznav5tExP8qoxfOeqRSKVxdXTUednbF1RuJRII1a9agc+fOkMvlCAoKwokTJxAdHY2WLVvCwsICTZo0QUxMTKnjrlmzBp6enpDL5ejduzcyMko+qM+cOYOwsDA4OjrCxsYGLVq0wPnz5zX2l0gkWL16Nbp27QoLCwvMnz+/1HPk5uaiY8eOaNq0qXqoyLp16xAUFASZTIbAwECsWrVKY5/Tp0+jbt26kMlkCAkJwYULFyr8Wp08eRLLli3DkiVLMGnSJPj7+yMoKAjz58/H+PHjMWHCBMTHx1f4eNrUKcgJB26m4HBMKu5lKPHNybvIL1Khpb99me1vpeRhy7n7OBGbjkKVUGabRftv4UhMKu5mKBCXpsDq43FwsjSDr704lbuy/K+uG37/5wEioh7iTmoePjtwC8pCFTo+VXl+bMHeaOy6nISY5FzEpymwdH8MJBKgrqe1RruCIgFpuQXqR7aySB/dqTBBEBB18FfU6tAHnq+Fws7DF00GTURuRiriL54odz+PGiGo02UgvJ6qXj5mZm6Btu/Nh3f912HjUgVOvoFo0GcUUuOikZP6QFfdKZMgCLh+6FfUaN8HVWo3hp2HLxq/NQF5Gam4e6n8Pl4/uBNVQ9vDr3EYbNy80KDPuzAxk+LWiX0AgIe3riIn5QEaD3gftu4+sHX3QeO33kdqfDSSbhRX/e7/cwYSYxOE/G8UrF2qwMG7Ghr0fRfxkX8j6+F9vfT/SYIg4OqBnajdsS+8XwuFfRVfNB88EXkZKYiLLP+1qFKzAep3G1SqWv2kqg1bwT2oLqyc3GDn7o2Gb4xAgSIXqfdu66Irr0QQBETu24mGXd5E1bpN4Ojph3bDpiAnPQW3zv9d7n7dJyxAcLN2cPDwgZNXVbR9eyKyUh7gQexNPUavfXuPX8WcVXuw6+B/u1r9mCAI+GvXD+jcewjqNm4OT98AvP3+LKSnJuPCySPP3FeRl4t1y2Zh4HvTILe00thmZGwMGzsHjcf5k4fRoFkbyMzluuwSGQitlxTnzZuHgQMHIjIyEoGBgejXrx/eeecdTJs2DWfPnoUgCBgzZozGPtHR0di+fTt2796NiIgIXLhwAaNHl1ROsrKyMGjQIBw7dgwnT55EQEAAwsPDkZWVpXGc2bNno0ePHrh8+TLefvttjW3p6ekICwuDSqXCvn37YGtri82bN2PmzJmYP38+oqKisGDBAnz00UfqoS/Z2dno3LkzgoODce7cOcyePRuTJk2q8GuxdetWWFpa4p133im1beLEiSgoKMDPP/9c4eNpi7GRBL4OcvyTUDK0QQDwT0I2ApwstPY8cjNjAEB2/r8j0TQxkqCasyXOxaer1wkAzsWnI9jNqtz9niQ1MYKJkRGyFIUa6+tUscbPw0Kw4a06GN/St9wzAGLJTkmEIjMNrtXrqNeZmVvA0ac6Ht6+ptXnKsjLASQSmJpbavW4z5OTklRmHx18qiO5nD4WFRYgNT5aYx+JkRFcqtdBcmzxPqrCAkACGJmYqtsYm5hBIpHg4a0r6jbGxiaQGJV8pBqbFp/deBhzVVtdrLDs5ETkZabBPbCOep2ZuQUcfavjwW3tDVcqKizA9WN/wMzcAvZVfLV2XG3JfJiI3IxUeAbXU6+Tyi3g4heIhJiKvw75eTkAAJlFxT4nSD+Sk+4jIy0FQXUaqNfJLSzhV60GYq5dfua+m79ailohTRFcp+Fznyc2+hrib91As7AurxyzWCQS8R6V0QtnAHv27IGlpeaX5vTp0zF9+nQAwJAhQ9C7d28AwAcffIDQ0FB89NFHaN++PQBg3LhxGDJkiMb+CoUCGzduhIdH8Ri4FStWoFOnTli2bBlcXV3RunVrjfZr166Fra0tDh8+rDFuuV+/fhrHvnXrFgAgMTERffr0QUBAALZs2QIzs+IvvVmzZmHZsmXo2bN4bJWvry+uXr2KNWvWYNCgQdiyZQtUKhW++eYbyGQy1KhRA3fv3sWoUWWfIn/ajRs3ULVqVfXzPcnd3R3W1ta4caP84QNKpRJKpeapraKCfPWX9suylhrD2EiCjDzN4R0ZeQVwt5a+0rEfkwAY2MAD1x5k4276v+NUqo25CYyNJKWGtaTlFsDLrmLV9RFNvZGSk49z8U+cWbmTjmMxqUjIVMLdRoqhTbywqGsQxvx4GeUU+fVOkZkGAJA9MUYYAGRWtupt2lBUkI8LO7+FT/0WMNNzhSfvcR+tbDXWF/cxvcx9lDmZEFQqyKxL75OVdBcA4OATCBMzGSJ3fYvXugwEBCBy13cQVCr1c7pUq43zv6xD1F8/o1rLrijKV+Liru8exZWqtT5WVO6juMyfer/NrWzVMb+K+MuncOibxSjMV0JubY92Y+dDZmnzysfVttxHr738qfdXbm2L3IyKvS+CSoUjW7+Cm38NOFTx0XKE9Coy0lIAANa2mmdcrW3t1dvKcvrIPsTFXMeMT9dX6HmO7d0FN08f+AfVfvlgqVJ54eS6VatWWL16tcY6e/uSP+zatUv++FxcXAAAtWrV0linUCiQmZkJa+viU+teXl7qxBoAQkNDoVKpcP36dbi6uiIpKQkzZszAoUOH8ODBAxQVFSE3NxdxcXEacYSEhJQZc1hYGBo2bIgffvgBxsbF1dScnBzExMRg6NChGD58uLptYWEhbGyKvySioqJQu3ZtyGQyjdhehCA8O7sqK/F+bOHChZgzZ47Guhrd30GtHiNfKAYxDGlUBZ625pgd8d8+jfqkN+u7o1U1R0z4+QoKikre14M3Sz7Eb6fk4lZyLjYProfXPKxx4W6mGKHi9umDOLW1ZEx/q9Gzdf6cqqJCHPlmIQQADfu+q/Pniz1zEGe2rVQvtxg5SyfPI7OyQdO3p+Ls9lW4cXg3JBIJvOu3gJ1nVUgelWVs3LzR+K33ceGXdbi4ewMkRkao1qIrZFa2kEh0f81BzOmD+HvLCvVy2Og5z2j96lyrvYZu07+EIjsTN45H4NC6heg85TOYP5XE6tu1EwdwcONy9XKX8fNe+ZiHvv8SKffu4I1py175WPRqTh6KwKaVi9XLY2e++HuS+jAJW7/+FBPmfgFTs+cXk/KVCpw6shed+wx5btt/s0paQBbNCyfXFhYW8Pf3L3e7qWnJqdPHXzxlrVM9uhCoIgYNGoSUlBQsX74c3t7ekEqlCA0NRX6+5gUpFhZlD2no1KkTfv75Z1y9elWd6GdnFw+J+Prrr9GoUSON9o8T8FcVEBCAY8eOIT8/v1QSff/+fWRmZqJatWrl7j9t2jRMmDBBY92wH1/9FH6msghFKgE25qYa623MTZH+1HCHlzG4oQfqVbHGnD+jkVrOxY9iyMgrRJFKgJ1cs992ctPnxtm7rhveDPHApB1XcaucGVUeS8hUIj2vAB62MtGS6yq1G8HxidkuigqL+6fITIPcpuTHsCIrHXZV/F75+VRFhTj6zSLkpD5E2NgFeqlae9RqpDGjh+pxH7PSYf50Hz3KHrIgtbCGxMioVGVbkZWuUeV3C6qHLrPWQZmdAYmRMczkltgxfQAs67mq2/iEtIRPSEvkZabBRCqDBBJcP7ATlo6u0DWv2o3gVMb7nffU+52XlQ57LbzfplIZTJ3dYe3sDme/QPw0cxhu/v0nanfo88rHfhV+dRrD1a/065CbmQ6LJ2avyc1Mh5NX1ece79D3X+L2xVPoNXUZrOydtB8wvZA6DV+Hb7Ua6uXCRxMXZKanwtbeUb0+Mz0Vnn4BZR7jTvQ1ZKWnYd74wep1KlURbl6JxIE9P+GrX47A6Ikc4Nzxg8hXKtCkdbiWe0OG7F8xMDQuLg7379+Hu7s7gOILAY2MjFC9evGH5PHjx7Fq1SqEhxf/ccfHxyM5ObnCx1+0aBEsLS3Rpk0bHDp0CMHBwXBxcYG7uztu3bqF/v37l7lfUFAQNm3aBIVCoa5enzx5ssLP++abb2LFihVYs2YN3nvvPY1tS5cuhUwmQ58+5X8ZSaVSSKWav6xfdUgIABSpBNxOyUVNN0ucfTS8QQKghmvxbB+vYnBDDzTwssG8P6PxMLv8q/HFUKgScONBNup52uD4reJT4xIA9TxtsPNiYrn79annjv4NPPDBr1G48SDnuc/jaGkGa5kJUnPE+2FhKpPDVFaS4AqCAJm1HRKvX4S9Z3FSkZ+Xi+TY66j2+qt9aTxOrDMf3EfYuIWQWlo/fyctKL+PkeofDAV5uUiJvY6AZh3LPIaxiSnsPf2ReOMiqjyaYlBQqZB04yKqvV56qkzpo6EPidcvQpGdAY9ajUq1eTwUI+bEXhiZmmqM59aVsl4Lc2s7JFy/CIcn3+/b1xH4eiftByCo1ImsmMzM5Ro/7ARBgNzGHvFXL6iTaWVeDpJuXUPtVuVPhSoIAg5vXomY83+j1wdLYOOk+x9I9HwyuQVk8pIimiAIsLFzQNTFM/DyKy5U5eXm4NaNK2gZXvZUekGvhWDOl5s11n37+cdwreKNjm+8pZFYA8DRfbtQp+HrsLLRHGJF9CwvnFwrlUokJmomIiYmJnB0dCxnj+eTyWQYNGgQli5diszMTIwdOxa9e/eGq2vxB1pAQAA2bdqEkJAQZGZmYvLkyTA3f7EZKJYuXYqioiK0bt0ahw4dQmBgIObMmYOxY8fCxsYGHTp0gFKpxNmzZ5GWloYJEyagX79++PDDDzF8+HBMmzYNsbGxWLp0aYWfMzQ0FOPGjcPkyZORn5+P7t27o6CgAN9//z2++OILfPfdd3Bw0P9cwADwW9RDjGrqhVvJuYhOyUXHICdITYxwOLp4HOKopl5Iyy3AtgsJAIovgqxiU/wDw8RIAju5KbztzKEoLEJSVnES/XajKmjia4dlB28hr0AFm0cX9eUWFGkMoxDTjxcSMDXMH9eTcnAtKRu96rhBZmKMiKvFc3ZPDfNHck4+1v1dPOSob313DG7sifkRN5GYqVRXvfMKiqAoUEFmaoRBDT1xJCYFqTkFcLeR4p1m3riXrsCZuHSxulmKRCJBUKtu+CdiG6yc3WHp4IqLezZBbmOvMW/1X8unw/O1UFRvWXzhToEiT2O2i+yURKTGx0BqYQULe+fioSBfL0BqfAxajZoFQVWEvEdjWc0srGBsonmWQNd9rN6yG678+QOsnD1g6eCCS3u+h7mNParULunjgRXTUaV2KKq1KO5j9VbdcfL7z2DvFQAH72q4fuhXFCoV8G3cVr3PrZP7YO3iCamlDZJjr+H8T2tRvWU3WLtUUbe5cXg3HP2CYCI1R+K1C4jc+S1e6zoIZnL9XtgJFL8Wwa274+Lv22Dt5A5LRxdc2L0J5jYO8KpT8lpEfD4NXnWaIPiJ9ztT4/1OQsqj99vS3hkFSgUu/bENnrUbQ25jB0V2Jq4d3oPc9BT41Htd7/18HolEgjph3XFmz1bYunjA2skVJ3dsgIWtA/zqlcyI8suSD1C1XhO81qYbgOKK9fWTB9F57GyYysyR8+hvWmpuAZMKDCX4t7IwN0NVz5IKvI+HA2pX80BaZi7iE7V37YW+SCQStO3aB7/98B1c3D3h6OKOnd+vha29I+o2bq5ut/TDMagX2gKtO/8PMrkFPLw1z1qYyWSwtLYptT7pfjxuXonEuFmf6qU/OsVxIXr1wsl1REQE3NzcNNZVr14d1669/HAFf39/9OzZE+Hh4UhNTUXnzp01psT75ptvMGLECNSrVw+enp5YsGDBC83a8dhnn32mkWAPGzYMcrkcS5YsweTJk2FhYYFatWph/PjxAABLS0vs3r0bI0eORN26dREcHIzFixejV69eFX7Ozz//HLVr18aqVaswY8YMKBQKmJmZ4cCBA2jevPnzD6AjJ2PTYS01wRt13GBrboI7qXlYtP8WMh4NC3G0MMOTw8XtzE2xqEvJ6dYuNZzRpYYzriZmY97eaADFN6UBgJntNU/HrT4ehyMx+r+oqyyHbqbA1twUQxp7ws7CFDEPc/DBr1FIe3Rxp7OVGVRPdLxrLReYGRthTqfqGsfZcCoeG07dhUoF+DnK0S7ICZZSY6Tk5ONsXAa+PRH/r/lB8Vhw2BsozFfg1JYVxTcVqRqM1u/O0zgbkpWcAEVOyVCWlLib+Gv5NPXyuZ/XAQD8GrVBk4ETkJuegruXTwEAfluoeXam7biFcK2m3wuAgtr2QmG+Ame2FvfRyS8YLUfP1ehjdnIilE/00bt+cyizM3D5t++hyEqDnYcfWo6eq3ExYGbSPVzctQH5udmwsHdGjfa9Ub1Vd43nTrlzA5d/34LC/DxYO1dBg77vwreh5sXY+lSrXfH7/feWFcjPzYZz1Rpo995cmDz5fj9MgDK75OLc5LibiPhsqnr59E9fAwD8G7fF64MmQGJkhPSku4heOx+KnAxILazh6F0NHScugZ27t/469wLqd+yNQqUCBzYsL76JTEANdJswX+N1yHiQgLyskr+Jywf3AAB+WTxZ41ht356I4Gbt9BO4DtQL9sbedePUy59MKv4u27TrJEbM+l6ssF5Jh15vQalQYOOXi5Cbk42A4NoYP+dzjfHUDxPvIquci5qf5fhfe2Dn4IzguqXPUBE9i0R43hV3pFWxsbFo0aIFQkNDsXnz5hce3/3mxkjdBPYvl5SeJ3YIomgVXDnHeRb9W6ZZ0TPZv+iGS/pkJdXOdS7/NZPGVPxMqCHZ+8OrX2j6X/R6NfGGlly59/whjbpSw0N7U/z+V1TOT3IR+fj4qIelREZGih0OEREREWkRk+tXMHLkSFhaWpb5GDmy/OnyfH19MXv2bNSvX1+P0RIRERGRrv0rZgv5r5o7d265Y78fz+FNREREJKbKeqdEsTC5fgXOzs5wdnYWOwwiIiIi+pdgck1ERERkwFi41i+OuSYiIiIi0hJWromIiIgMGUvXesXKNRERERGRljC5JiIiIiLSEg4LISIiIjJgEo4L0StWromIiIiItISVayIiIiIDxpvI6Bcr10REREREWsLkmoiIiIhISzgshIiIiMiAcVSIfrFyTURERESkJaxcExERERkylq71ipVrIiIiIiItYeWaiIiIyIDxJjL6xco1EREREZGWMLkmIiIiItISDgshIiIiMmC8Q6N+sXJNRERERKQlrFwTERERGTAWrvWLlWsiIiIiIi1hck1EREREpCUcFkJERERkyDguRK9YuSYiIiIi0hJWromIiIgMGO/QqF+sXBMRERHRf0pqair69+8Pa2tr2NraYujQocjOzi63fWxsLCQSSZmPH3/8Ud2urO3btm17odhYuSYiIiIyYIZ4E5n+/fsjISEB+/btQ0FBAYYMGYIRI0Zgy5YtZbb39PREQkKCxrq1a9diyZIl6Nixo8b6b7/9Fh06dFAv29ravlBsTK6JiIiI6D8jKioKEREROHPmDEJCQgAAK1asQHh4OJYuXQp3d/dS+xgbG8PV1VVj3Y4dO9C7d29YWlpqrLe1tS3V9kVwWAgRERER6YRSqURmZqbGQ6lUvtIxT5w4AVtbW3ViDQBt27aFkZERTp06VaFjnDt3DpGRkRg6dGipbe+++y4cHR3RsGFDrF+/HoIgvFB8rFz/xwS5WT6/kQF60T9sQ3EtofzxY4bM2Lhy/u6vrH/nH3cIFDsEUdT+YZ7YIYiiXZ+PxA5BFHkXvhTtucUcFbJw4ULMmTNHY92sWbMwe/bslz5mYmIinJ2dNdaZmJjA3t4eiYmJFTrGN998g6CgIDRp0kRj/dy5c9G6dWvI5XLs3bsXo0ePRnZ2NsaOHVvh+JhcExEREZFOTJs2DRMmTNBYJ5VKy2w7depULF68+JnHi4qKeuWY8vLysGXLFnz0Uekfek+uq1u3LnJycrBkyRIm10RERET0iIila6lUWm4y/bSJEydi8ODBz2zj5+cHV1dXPHjwQGN9YWEhUlNTKzRW+qeffkJubi4GDhz43LaNGjXCvHnzoFQqK9wPJtdEREREJDonJyc4OTk9t11oaCjS09Nx7tw51K9fHwBw4MABqFQqNGrU6Ln7f/PNN+jatWuFnisyMhJ2dnYVTqwBJtdERERE9B8SFBSEDh06YPjw4fjqq69QUFCAMWPGoG/fvuqZQu7du4c2bdpg48aNaNiwoXrf6OhoHDlyBL///nup4+7evRtJSUlo3LgxZDIZ9u3bhwULFmDSpEkvFB+TayIiIiIDZoh3aNy8eTPGjBmDNm3awMjICL169cIXX3yh3l5QUIDr168jNzdXY7/169ejSpUqaNeuXaljmpqaYuXKlXj//fchCAL8/f3x6aefYvjw4S8Um0SorJen/0fN3RctdgiiuHo/S+wQRGFsZHgfiBXB2UIql8o6W0hcSu7zGxkgzhaif3dSXm3qu1fh7VDx4RSGgpVrIiIiIgNmiHdo/DernOUhIiIiIiIdYHJNRERERKQlHBZCREREZMA4KkS/WLkmIiIiItISVq6JiIiIDBgvaNQvVq6JiIiIiLSElWsiIiIig8bStT6xck1EREREpCVMromIiIiItITDQoiIiIgMGC9o1C9WromIiIiItISVayIiIiIDxsK1frFyTURERESkJUyuiYiIiIi0hMNCiIiIiAwYL2jUL1auiYiIiIi0hJVrIiIiIgMm4SWNesXKNRERERGRlrByTURERGTIWLjWK1auiYiIiIi0hMk1EREREZGWcFgIERERkQHjqBD9YuWaiIiIiEhLWLkmIiIiMmC8iYx+/asq17Nnz0adOnV0cuxDhw5BIpEgPT1da8eMjY2FRCJBZGSk1o5JRERERP9dL125Hjx4MDZs2FBqffv27REREfFKQRmqHTt2YPHixYiKioJKpYKXlxfCwsLw+eefixKPIAi49Nv3iP77TxTk5cDJLwgN+rwLa2ePcvdJiv4HUX/9jNS4aORlpqL58BnwfC1Uo01c5HHcPPYHUuOikZ+bhY5Tv4B9laq67k6FtavuiC41nWFjboq41Dx8e/ouYpJzy2xbxVaG/9Vxg5+DOZwspdhw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GZoXDTf2tgVQ/BqWxc9Bjp61XCA1MULCo6nw/o4tu60unLqTDiupMXq95vqo33ma/bYw00h2bybnYvXxO8X9ruOKpCwlPj8Si7sZJVV5W3NT9KvnXjxkSlGIY7fSsPOfJPV2H3tz+D+aXWRZtyCNeN7feRXJOeINi+o9YAgUijx8vngusrOzULN2XSz4dDXMnjgLmHDvLjLSNZOq82dO4kFSAtp37l7usf/cswOOzi6o37D8qUjF0qHXW1AqFNj45SLk5mQjILg2xs/5XGM89cPEu8jKTH/hYx//aw/sHJwRXLfR8xv/C9UL9sbedePUy59MKv7e3rTrJEbM+l6ssMiASQThv3rZTeU091FiU9lcva/7U+z/RsZiThosImPjf88NePSpsn4cf9wh8PmNDFBcOXdINXTt+nwkdgiiyLvw5fMb6UhqjnhTw9pbaPfatf+CyvkNRkRERESkA0yutWTkyJGl5vx+/Bg5cqTY4RERERGRHvzrZgv5r5o7d265Y78fz+FNREREpG+8oFG/mFxribOzM5ydy77pABERERFVDhwWQkRERESkJUyuiYiIiIi0hMNCiIiIiAwYx1zrFyvXRERERERawuSaiIiIiEhLOCyEiIiIyIBJwHEh+sTKNRERERGRlrByTURERGTAeEGjfrFyTURERESkJUyuiYiIiIi0hMNCiIiIiAwYR4XoFyvXRERERERawso1ERERkSFj6VqvWLkmIiIiItISVq6JiIiIDBhvIqNfrFwTEREREWkJk2siIiIiIi3hsBAiIiIiA8Y7NOoXK9dERERERFrCyjURERGRAWPhWr9YuSYiIiIi0hIm10REREREWsJhIURERESGjONC9IqVayIiIiIiLWHlmoiIiMiA8Q6N+sXKNRERERH9p8yfPx9NmjSBXC6Hra1thfYRBAEzZ86Em5sbzM3N0bZtW9y8eVOjTWpqKvr37w9ra2vY2tpi6NChyM7OfqHYmFwTERERGTCJRLyHruTn5+N///sfRo0aVeF9PvnkE3zxxRf46quvcOrUKVhYWKB9+/ZQKBTqNv3798eVK1ewb98+7NmzB0eOHMGIESNeKDYOCyEiIiKi/5Q5c+YAAL777rsKtRcEAZ9//jlmzJiBbt26AQA2btwIFxcX7Ny5E3379kVUVBQiIiJw5swZhISEAABWrFiB8PBwLF26FO7u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iowMFYeFEBFRpbJ27Vp8/PHHePvttytVslVZh0cYGRmVu82QK/YkHibXRERUqVTWZKtLly4YPHgwevXqJXYoRAaNw0KIiKhSefrOhJVFZRseER4ejq1bt8LGxgYAsGjRIowcORK2trYAgJSUFLz++uu4evWqiFGSIWLlmoiIKoXKnmxVtoq9sbExEhIS4OzsDKD49u6RkZHw8/MDACQlJcHd3d3g+k3iK/9fGhERkQH5888/oVQq1csLFixAamqqermwsBDXr18XIzS9UKlU5T4MMcF8unbIWiLpC5NrIiKqFCprshUeHo6MjAz18qJFi5Cenq5eTklJQXBwsAiRERkmJtdEREQGrLJW7CUSSanpBivL9IMkLl7QSERElUJlTbYqa8VeEAQMHjwYUqkUAKBQKDBy5EhYWFgAgMYPDiJtYnJNRESVApOtymXQoEEaywMGDCjVZuDAgfoKhyoRJtdERFQpVNZkq7JW7L/99luxQ6BKilPxERERGTAjIyN07NhRXbHfvXs3WrdurVGxj4iIMMgZQ4jEwOSaiIjIgA0ZMqRC7VjpJdIOJtdERERERFrCqfiIiIiIiLSEyTURERERkZYwuSYiIiIi0hIm10REREREWsLkmoiIiIhIS5hcExERERFpCZNrIiIiIiIt+T+3cf6b3mzcgAAAAABJRU5ErkJggg==",
      "text/plain": [
       "<Figure size 800x800 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# data corr\n",
    "plt.figure(figsize=(8, 8))\n",
    "sns.heatmap(Data.corr(), annot=True, cmap=\"Blues\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1e5ea85a",
   "metadata": {
    "papermill": {
     "duration": 0.015836,
     "end_time": "2024-05-27T23:53:38.925184",
     "exception": false,
     "start_time": "2024-05-27T23:53:38.909348",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## **Model Building**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "089b226d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-27T23:53:38.958258Z",
     "iopub.status.busy": "2024-05-27T23:53:38.957526Z",
     "iopub.status.idle": "2024-05-27T23:53:39.320944Z",
     "shell.execute_reply": "2024-05-27T23:53:39.319796Z"
    },
    "papermill": {
     "duration": 0.382575,
     "end_time": "2024-05-27T23:53:39.323398",
     "exception": false,
     "start_time": "2024-05-27T23:53:38.940823",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# import lib of algorithms\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn.model_selection import train_test_split, cross_val_score\n",
    "from sklearn import utils\n",
    "from sklearn.metrics import accuracy_score  ,  mean_squared_error"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "c59bcf9d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-27T23:53:39.355922Z",
     "iopub.status.busy": "2024-05-27T23:53:39.355522Z",
     "iopub.status.idle": "2024-05-27T23:53:39.372180Z",
     "shell.execute_reply": "2024-05-27T23:53:39.371367Z"
    },
    "papermill": {
     "duration": 0.035521,
     "end_time": "2024-05-27T23:53:39.374370",
     "exception": false,
     "start_time": "2024-05-27T23:53:39.338849",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Survived</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Sex</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Embarked_C</th>\n",
       "      <th>Embarked_Q</th>\n",
       "      <th>Embarked_S</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>383</th>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>259</th>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>190</th>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>416</th>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>345</th>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>308</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>310</th>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>69</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>179</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>418 rows × 8 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     Survived  Pclass  Sex  SibSp  Parch  Embarked_C  Embarked_Q  Embarked_S\n",
       "383         1       3    0      1      0         0.0         0.0         1.0\n",
       "22          1       1    0      0      0         0.0         0.0         1.0\n",
       "259         0       3    1      0      0         0.0         0.0         1.0\n",
       "190         0       2    1      1      0         0.0         0.0         1.0\n",
       "416         0       3    1      0      0         0.0         0.0         1.0\n",
       "..        ...     ...  ...    ...    ...         ...         ...         ...\n",
       "345         1       3    0      0      0         0.0         0.0         1.0\n",
       "308         0       1    1      1      1         0.0         0.0         1.0\n",
       "310         0       3    1      0      0         0.0         0.0         1.0\n",
       "69          1       1    0      1      4         0.0         0.0         1.0\n",
       "179         1       1    0      0      2         1.0         0.0         0.0\n",
       "\n",
       "[418 rows x 8 columns]"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# sshuffel data to protect from high varaince\n",
    "Data=utils.shuffle(Data)\n",
    "Data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "081743b8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-27T23:53:39.408725Z",
     "iopub.status.busy": "2024-05-27T23:53:39.408324Z",
     "iopub.status.idle": "2024-05-27T23:53:39.416479Z",
     "shell.execute_reply": "2024-05-27T23:53:39.415401Z"
    },
    "papermill": {
     "duration": 0.027506,
     "end_time": "2024-05-27T23:53:39.418575",
     "exception": false,
     "start_time": "2024-05-27T23:53:39.391069",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Survived      0\n",
       "Pclass        0\n",
       "Sex           0\n",
       "SibSp         0\n",
       "Parch         0\n",
       "Embarked_C    0\n",
       "Embarked_Q    0\n",
       "Embarked_S    0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Data.isna().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "c8d449f5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-27T23:53:39.452758Z",
     "iopub.status.busy": "2024-05-27T23:53:39.452358Z",
     "iopub.status.idle": "2024-05-27T23:53:39.508721Z",
     "shell.execute_reply": "2024-05-27T23:53:39.507341Z"
    },
    "papermill": {
     "duration": 0.076063,
     "end_time": "2024-05-27T23:53:39.511260",
     "exception": false,
     "start_time": "2024-05-27T23:53:39.435197",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train data_shape=(334, 7)\n",
      "\n",
      "\n",
      "test data_shape=(42, 7)\n",
      "\n",
      "\n",
      "Validation Accuracy: 52.38\n",
      "Test Accuracy: 100.00\n",
      "\n",
      "\n",
      "Cross-validation scores: 99.40\n",
      "Mean CV accuracy: 99.40\n",
      "\n",
      "\n",
      "Mean Squared Error: 0.00\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.10/site-packages/sklearn/utils/validation.py:1143: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n",
      "  y = column_or_1d(y, warn=True)\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/base.py:432: UserWarning: X has feature names, but LogisticRegression was fitted without feature names\n",
      "  warnings.warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/utils/validation.py:1143: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n",
      "  y = column_or_1d(y, warn=True)\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/utils/validation.py:1143: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n",
      "  y = column_or_1d(y, warn=True)\n"
     ]
    }
   ],
   "source": [
    "from sklearn.preprocessing import StandardScaler\n",
    "from sklearn.linear_model import LogisticRegressionCV\n",
    "\n",
    "lg = LogisticRegression( penalty='l2', solver='liblinear',C=0.01)\n",
    "\n",
    "X = Data.drop([\"Survived\"], axis=1)\n",
    "target_col=[\"Survived\"]\n",
    "Y = Data[target_col]\n",
    "X_train, X_test, Y_train, Y_test = train_test_split(X, Y, shuffle=True,\n",
    "                                                    random_state=42, test_size=0.2)\n",
    "X_val, X_test, Y_val, Y_test = train_test_split(X_test, Y_test, test_size=0.5,\n",
    "                                                random_state=42,shuffle=True)\n",
    "\n",
    "scaler = StandardScaler()\n",
    "X_train = scaler.fit_transform(X_train)\n",
    "X_test = scaler.transform(X_test)\n",
    "\n",
    "model_lg = lg.fit(X_train, Y_train)\n",
    "\n",
    "predictions = model_lg.predict(X_test)\n",
    "print(f\"train data_shape={X_train.shape}\")\n",
    "print(\"\\n\")\n",
    "print(f\"test data_shape={X_test.shape}\")\n",
    "print(\"\\n\")\n",
    "\n",
    "\n",
    "# Validate the model on the validation set\n",
    "val_predictions = lg.predict(X_val)\n",
    "val_acc = accuracy_score(Y_val, val_predictions)\n",
    "print(f\"Validation Accuracy: {val_acc*100:.2f}\")\n",
    "\n",
    "# Evaluate the model on the test set\n",
    "test_predictions = lg.predict(X_test)\n",
    "test_acc = accuracy_score(Y_test, test_predictions)\n",
    "print(f\"Test Accuracy: {test_acc*100:.2f}\")\n",
    "print(\"\\n\")\n",
    "# Cross-validation\n",
    "cv_mean_acc = cross_val_score(lg, X_train, Y_train,cv=2)\n",
    "print(f\"Cross-validation scores: {cv_mean_acc.mean() * 100:.2f}\")\n",
    "print(f\"Mean CV accuracy: {cv_mean_acc.mean() * 100:.2f}\")\n",
    "print(\"\\n\")\n",
    "\n",
    "# Additional evaluation metrics\n",
    "mse = mean_squared_error(Y_test, test_predictions)\n",
    "print(f\"Mean Squared Error: {mse*100:.2f}\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "d98df3dc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-27T23:53:39.545706Z",
     "iopub.status.busy": "2024-05-27T23:53:39.545323Z",
     "iopub.status.idle": "2024-05-27T23:53:39.831873Z",
     "shell.execute_reply": "2024-05-27T23:53:39.830640Z"
    },
    "papermill": {
     "duration": 0.307506,
     "end_time": "2024-05-27T23:53:39.834870",
     "exception": false,
     "start_time": "2024-05-27T23:53:39.527364",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 800x600 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Accuracy values\n",
    "accuracy_values = [val_acc*100, test_acc*100, cv_mean_acc.mean() * 100, mse*100]\n",
    "\n",
    "# Metrics\n",
    "metrics = [\"Validation Accuracy\", \"Test Accuracy\", \"Cross-validation Accuracy\", \"Mean Squared Error\"]\n",
    "\n",
    "# Create a data frame\n",
    "df = pd.DataFrame(list(zip(metrics, accuracy_values)), columns =['Metrics', 'Accuracy'])\n",
    "\n",
    "# Create a heatmap\n",
    "plt.figure(figsize=(8, 6))\n",
    "sns.heatmap(df.set_index('Metrics'), annot=True, fmt=\".2f\", cmap='YlGnBu')\n",
    "\n",
    "# Show the plot\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "fb58c644",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-27T23:53:39.870856Z",
     "iopub.status.busy": "2024-05-27T23:53:39.870461Z",
     "iopub.status.idle": "2024-05-27T23:53:39.879850Z",
     "shell.execute_reply": "2024-05-27T23:53:39.878410Z"
    },
    "papermill": {
     "duration": 0.030702,
     "end_time": "2024-05-27T23:53:39.882389",
     "exception": false,
     "start_time": "2024-05-27T23:53:39.851687",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['logistic rg_model.pkl']"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import joblib\n",
    "\n",
    "# Save the model as a pickle file\n",
    "joblib.dump(lg, 'logistic rg_model.pkl')\n"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "datasetId": 2209271,
     "sourceId": 3691974,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 30698,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 9.467482,
   "end_time": "2024-05-27T23:53:40.521464",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-05-27T23:53:31.053982",
   "version": "2.5.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
